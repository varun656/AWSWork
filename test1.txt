www

Wdwd
diff --git a/LICENSE.txt b/LICENSE.txt
new file mode 100644
index 0000000..1eac78a
--- /dev/null
+++ b/LICENSE.txt
@@ -0,0 +1,201 @@
+                              Apache License
+                        Version 2.0, January 2004
+                     http://www.apache.org/licenses/
+
+TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+1. Definitions.
+
+   "License" shall mean the terms and conditions for use, reproduction,
+   and distribution as defined by Sections 1 through 9 of this document.
+
+   "Licensor" shall mean the copyright owner or entity authorized by
+   the copyright owner that is granting the License.
+
+   "Legal Entity" shall mean the union of the acting entity and all
+   other entities that control, are controlled by, or are under common
+   control with that entity. For the purposes of this definition,
+   "control" means (i) the power, direct or indirect, to cause the
+   direction or management of such entity, whether by contract or
+   otherwise, or (ii) ownership of fifty percent (50%) or more of the
+   outstanding shares, or (iii) beneficial ownership of such entity.
+
+   "You" (or "Your") shall mean an individual or Legal Entity
+   exercising permissions granted by this License.
+
+   "Source" form shall mean the preferred form for making modifications,
+   including but not limited to software source code, documentation
+   source, and configuration files.
+
+   "Object" form shall mean any form resulting from mechanical
+   transformation or translation of a Source form, including but
+   not limited to compiled object code, generated documentation,
+   and conversions to other media types.
+
+   "Work" shall mean the work of authorship, whether in Source or
+   Object form, made available under the License, as indicated by a
+   copyright notice that is included in or attached to the work
+   (an example is provided in the Appendix below).
+
+   "Derivative Works" shall mean any work, whether in Source or Object
+   form, that is based on (or derived from) the Work and for which the
+   editorial revisions, annotations, elaborations, or other modifications
+   represent, as a whole, an original work of authorship. For the purposes
+   of this License, Derivative Works shall not include works that remain
+   separable from, or merely link (or bind by name) to the interfaces of,
+   the Work and Derivative Works thereof.
+
+   "Contribution" shall mean any work of authorship, including
+   the original version of the Work and any modifications or additions
+   to that Work or Derivative Works thereof, that is intentionally
+   submitted to Licensor for inclusion in the Work by the copyright owner
+   or by an individual or Legal Entity authorized to submit on behalf of
+   the copyright owner. For the purposes of this definition, "submitted"
+   means any form of electronic, verbal, or written communication sent
+   to the Licensor or its representatives, including but not limited to
+   communication on electronic mailing lists, source code control systems,
+   and issue tracking systems that are managed by, or on behalf of, the
+   Licensor for the purpose of discussing and improving the Work, but
+   excluding communication that is conspicuously marked or otherwise
+   designated in writing by the copyright owner as "Not a Contribution."
+
+   "Contributor" shall mean Licensor and any individual or Legal Entity
+   on behalf of whom a Contribution has been received by Licensor and
+   subsequently incorporated within the Work.
+
+2. Grant of Copyright License. Subject to the terms and conditions of
+   this License, each Contributor hereby grants to You a perpetual,
+   worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+   copyright license to reproduce, prepare Derivative Works of,
+   publicly display, publicly perform, sublicense, and distribute the
+   Work and such Derivative Works in Source or Object form.
+
+3. Grant of Patent License. Subject to the terms and conditions of
+   this License, each Contributor hereby grants to You a perpetual,
+   worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+   (except as stated in this section) patent license to make, have made,
+   use, offer to sell, sell, import, and otherwise transfer the Work,
+   where such license applies only to those patent claims licensable
+   by such Contributor that are necessarily infringed by their
+   Contribution(s) alone or by combination of their Contribution(s)
+   with the Work to which such Contribution(s) was submitted. If You
+   institute patent litigation against any entity (including a
+   cross-claim or counterclaim in a lawsuit) alleging that the Work
+   or a Contribution incorporated within the Work constitutes direct
+   or contributory patent infringement, then any patent licenses
+   granted to You under this License for that Work shall terminate
+   as of the date such litigation is filed.
+
+4. Redistribution. You may reproduce and distribute copies of the
+   Work or Derivative Works thereof in any medium, with or without
+   modifications, and in Source or Object form, provided that You
+   meet the following conditions:
+
+   (a) You must give any other recipients of the Work or
+       Derivative Works a copy of this License; and
+
+   (b) You must cause any modified files to carry prominent notices
+       stating that You changed the files; and
+
+   (c) You must retain, in the Source form of any Derivative Works
+       that You distribute, all copyright, patent, trademark, and
+       attribution notices from the Source form of the Work,
+       excluding those notices that do not pertain to any part of
+       the Derivative Works; and
+
+   (d) If the Work includes a "NOTICE" text file as part of its
+       distribution, then any Derivative Works that You distribute must
+       include a readable copy of the attribution notices contained
+       within such NOTICE file, excluding those notices that do not
+       pertain to any part of the Derivative Works, in at least one
+       of the following places: within a NOTICE text file distributed
+       as part of the Derivative Works; within the Source form or
+       documentation, if provided along with the Derivative Works; or,
+       within a display generated by the Derivative Works, if and
+       wherever such third-party notices normally appear. The contents
+       of the NOTICE file are for informational purposes only and
+       do not modify the License. You may add Your own attribution
+       notices within Derivative Works that You distribute, alongside
+       or as an addendum to the NOTICE text from the Work, provided
+       that such additional attribution notices cannot be construed
+       as modifying the License.
+
+   You may add Your own copyright statement to Your modifications and
+   may provide additional or different license terms and conditions
+   for use, reproduction, or distribution of Your modifications, or
+   for any such Derivative Works as a whole, provided Your use,
+   reproduction, and distribution of the Work otherwise complies with
+   the conditions stated in this License.
+
+5. Submission of Contributions. Unless You explicitly state otherwise,
+   any Contribution intentionally submitted for inclusion in the Work
+   by You to the Licensor shall be under the terms and conditions of
+   this License, without any additional terms or conditions.
+   Notwithstanding the above, nothing herein shall supersede or modify
+   the terms of any separate license agreement you may have executed
+   with Licensor regarding such Contributions.
+
+6. Trademarks. This License does not grant permission to use the trade
+   names, trademarks, service marks, or product names of the Licensor,
+   except as required for reasonable and customary use in describing the
+   origin of the Work and reproducing the content of the NOTICE file.
+
+7. Disclaimer of Warranty. Unless required by applicable law or
+   agreed to in writing, Licensor provides the Work (and each
+   Contributor provides its Contributions) on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+   implied, including, without limitation, any warranties or conditions
+   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+   PARTICULAR PURPOSE. You are solely responsible for determining the
+   appropriateness of using or redistributing the Work and assume any
+   risks associated with Your exercise of permissions under this License.
+
+8. Limitation of Liability. In no event and under no legal theory,
+   whether in tort (including negligence), contract, or otherwise,
+   unless required by applicable law (such as deliberate and grossly
+   negligent acts) or agreed to in writing, shall any Contributor be
+   liable to You for damages, including any direct, indirect, special,
+   incidental, or consequential damages of any character arising as a
+   result of this License or out of the use or inability to use the
+   Work (including but not limited to damages for loss of goodwill,
+   work stoppage, computer failure or malfunction, or any and all
+   other commercial damages or losses), even if such Contributor
+   has been advised of the possibility of such damages.
+
+9. Accepting Warranty or Additional Liability. While redistributing
+   the Work or Derivative Works thereof, You may choose to offer,
+   and charge a fee for, acceptance of support, warranty, indemnity,
+   or other liability obligations and/or rights consistent with this
+   License. However, in accepting such obligations, You may act only
+   on Your own behalf and on Your sole responsibility, not on behalf
+   of any other Contributor, and only if You agree to indemnify,
+   defend, and hold each Contributor harmless for any liability
+   incurred by, or claims asserted against, such Contributor by reason
+   of your accepting any such warranty or additional liability.
+
+END OF TERMS AND CONDITIONS
+
+APPENDIX: How to apply the Apache License to your work.
+
+   To apply the Apache License to your work, attach the following
+   boilerplate notice, with the fields enclosed by brackets "[]"
+   replaced with your own identifying information. (Don't include
+   the brackets!)  The text should be enclosed in the appropriate
+   comment syntax for the file format. We also recommend that a
+   file or class name and description of purpose be included on the
+   same "printed page" as the copyright notice for easier
+   identification within third-party archives.
+
+Copyright 2012-2014 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
diff --git a/Mainfile.txt b/Mainfile.txt
new file mode 100644
index 0000000..15ece63
--- /dev/null
+++ b/Mainfile.txt
@@ -0,0 +1,25 @@
+dwdawd
+wad
+aw
+dwa
+
+dwd
+awd
+aw
+daw
+ddwdadw
+daw
+d
+ad
+awdadwad
+
+daw
+da
+wdawdaw
+daw
+dwadwadw
+daw
+da
+wd
+wad
+rwawadawda
diff --git a/TestCommit b/TestCommit
new file mode 100644
index 0000000..e965047
--- /dev/null
+++ b/TestCommit
@@ -0,0 +1 @@
+Hello
diff --git a/Webhook_Folder/filewebhook2 b/Webhook_Folder/filewebhook2
new file mode 100644
index 0000000..e69de29
diff --git a/Webhook_Folder/webhook_test.txt b/Webhook_Folder/webhook_test.txt
new file mode 100644
index 0000000..529ca53
--- /dev/null
+++ b/Webhook_Folder/webhook_test.txt
@@ -0,0 +1,4 @@
+
+wdwdw
+wdwdaw
+wHello
diff --git a/appspec.yml b/appspec.yml
new file mode 100644
index 0000000..7f0cdf9
--- /dev/null
+++ b/appspec.yml
@@ -0,0 +1,18 @@
+version: 0.0
+os: linux
+files:
+  - source: /index.html
+    destination: /var/www/html/
+hooks:
+  BeforeInstall:
+    - location: scripts/install_dependencies
+      timeout: 300
+      runas: root
+    - location: scripts/start_server
+      timeout: 300
+      runas: root
+  ApplicationStop:
+    - location: scripts/stop_server
+      timeout: 300
+      runas: root
+
diff --git a/build1.yaml b/build1.yaml
new file mode 100644
index 0000000..8e1392a
--- /dev/null
+++ b/build1.yaml
@@ -0,0 +1,11 @@
+version: 0.2
+
+phases:
+  build:
+    commands:
+      - echo "Hi from Build1"
+      - codebuild-breakpoint 
+
+artifacts:
+  files:
+    - '**/*'
\ No newline at end of file
diff --git a/build2.yaml b/build2.yaml
new file mode 100644
index 0000000..e5a1cbc
--- /dev/null
+++ b/build2.yaml
@@ -0,0 +1,10 @@
+version: 0.2
+
+phases:
+  build:
+    commands:
+      - echo "Hi from Build2"
+
+artifacts:
+  files:
+    - '**/*'
\ No newline at end of file
diff --git a/command-output.txt b/command-output.txt
new file mode 100644
index 0000000..be786b3
--- /dev/null
+++ b/command-output.txt
@@ -0,0 +1 @@
+vpce-049ca2f0397abd9de
diff --git a/feature_branch.txt b/feature_branch.txt
new file mode 100644
index 0000000..7b74332
--- /dev/null
+++ b/feature_branch.txt
@@ -0,0 +1,45 @@
+Test again
+Remove
+Remove required check 3
+Remove required check 2
+Removed Required check
+Push from new feature to Buidl 2
+Test change 4
+Test change 3
+Test change 2
+Test change 1
+Testing change
+Screenshot change 2
+SScreenshot change
+CHange news 
+Test again
+New pull
+Testing Build again 
+Test Over
+PRTest3 Checking
+NEw test
+Insert 100 mins
+Test run 2
+Delted projecrt
+Testing again with Two push 20second delay
+Testing agin with Two push request
+new project 2
+New project eu-west-1
+CHanges made agin Git
+<<<<<<< HEAD
+Testing1234
+w
+d
+wad
+awdaawd
+=======
+>>>>>>> 5ebffc079cba29d3d1f3a2d9b8d2c96d7ea3d669
+wd
+wd
+aw
+daw
+d
+:wq!
+
+Changes made
+testing 123
diff --git a/force-app/data/file2.txt b/force-app/data/file2.txt
new file mode 100644
index 0000000..e69de29
diff --git a/force-app/testingfile.txt b/force-app/testingfile.txt
new file mode 100644
index 0000000..3e23ae4
--- /dev/null
+++ b/force-app/testingfile.txt
@@ -0,0 +1,2 @@
+
+hello
diff --git a/function.zip b/function.zip
new file mode 100644
index 0000000..5da177e
Binary files /dev/null and b/function.zip differ
diff --git a/index.html b/index.html
new file mode 100644
index 0000000..34b7341
--- /dev/null
+++ b/index.html
@@ -0,0 +1,35 @@
+<!DOCTYPE html>
+<html>
+<head>
+  <meta charset="utf-8">
+  <title>Sample Deployment</title>
+  <style>
+    body {
+      color: #ffffff;
+      background-color: #0188cc;
+      font-family: Arial, sans-serif;
+      font-size: 14px;
+    }
+    
+    h1 {
+      font-size: 500%;
+      font-weight: normal;
+      margin-bottom: 0;
+    }
+    
+    h2 {
+      font-size: 200%;
+      font-weight: normal;
+      margin-bottom: 0;
+    }
+  </style>
+</head>
+<body>
+  <div align="center">
+    <h1>Congratulations</h1>
+    <h2>This application was deployed using AWS CodeDeploy.</h2>
+    <p>For next steps, read the <a href="http://aws.amazon.com/documentation/codedeploy">AWS CodeDeploy Documentation</a>.</p>
+  </div>
+</body>
+</html>
+
diff --git a/index.js b/index.js
new file mode 100644
index 0000000..7533e19
--- /dev/null
+++ b/index.js
@@ -0,0 +1,5 @@
+exports.handler = async function(event, context) {
+  console.log("ENVIRONMENT VARIABLES\n" + JSON.stringify(process.env, null, 2))
+  console.log("EVENT\n" + JSON.stringify(event, null, 2))
+  return context.logStreamName
+}
diff --git a/infrastructure.yml b/infrastructure.yml
new file mode 100644
index 0000000..f4203c6
--- /dev/null
+++ b/infrastructure.yml
@@ -0,0 +1,1671 @@
+AWSTemplateFormatVersion: '2010-09-09'
+Transform:
+  - AWS::SecretsManager-2020-07-23
+  - AWS::Serverless-2016-10-31
+Description: VWS VPC Ingress Module Validation
+
+Parameters:
+
+  ParamBaseName:
+    Type: String
+    Default: 'release42'
+
+  ParamStageName:
+    Type: String
+
+  ParamMigrationActive:
+    Default: 'true'
+    Type: String
+
+  ParamEnableSlackbotSecret:
+    Default: 'true'
+    Type: String
+
+  ParamContainerCpu:
+    Default: '1024'
+    Type: String
+
+  ParamBastionContainerCpu:
+    Default: '256'
+    Type: String
+
+  ParamContainerMemory:
+    Default: '2048'
+    Type: String
+
+  ParamBastionContainerMemory:
+    Default: '512'
+    Type: String
+
+  ParamJvmContainerXmx:
+    Default: '1792'
+    Type: String
+
+  ParamTaskMinContainerCount:
+    Default: '2'
+    Type: String
+
+  ParamFrontendContainerPort:
+    Default: '80'
+    Type: String
+
+  ParamBackendContainerPort:
+    Default: '8080'
+    Type: String
+
+  ParamFargatePlatformVersion:
+    Default: '1.4.0'
+    Type: String
+
+  ParamContainerFamily:
+    Default: release42
+    Type: String
+
+  ParamXrayTag:
+    Default: 'latest'
+    Type: String
+
+  ParamBastionHostTag:
+    Default: 'latest'
+    Type: String
+
+  ParamFrontendRepository:
+    Type: String
+
+  ParamBackendRepository:
+    Type: String
+
+  ParamXrayRepository:
+    Type: String
+
+  ParamBastionHostRepository:
+    Type: String
+
+  ParamCidrRange:
+    Default: '192.168.0.0/20'
+    Description: 'VPC CIDR range'
+    Type: String
+    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
+
+  ParamDomainname:
+    Type: String
+
+  ParamCertificateArn:
+    Type: String
+
+  ParamHostedZoneId:
+    Type: String
+
+  ParamDeletionProtection:
+    Type: String
+    Default: 'True'
+
+  DBName:
+    Default: 'release42'
+    Description: 'My database-name'
+    Type: String
+
+  DBUserName:
+    Default: 'release42'
+    Description: 'My application-username'
+    Type: String
+
+  DBInstanceClass:
+    Default: 'db.t3.medium'
+    AllowedValues:
+      - db.t3.medium
+    Description: 'DB instance class'
+    Type: String
+    ConstraintDescription: 'Enter on of db.t3.medium.'
+
+  SlackChannel:
+    Type: String
+    Default: '#release-42-notifications'
+
+  SlackUser:
+    Type: String
+    Default: 'r42-Notifications'
+
+  ParamSlackFeedbackChannelId:
+    Type: String
+
+  ParamSlackFeedbackServiceEndpoint:
+    Type: String
+
+  ParamSlackFeedbackServiceRegion:
+    Type: String
+
+  ParamDisableStart:
+    Type: String
+    Default: 'false'
+
+  ParamStackRoleArn:
+    Type: String
+
+  ParamS3BucketName:
+    Default: 'Bucket'
+    Type: String
+
+  ParamS3BucketKey:
+    Default: 'release42-migration/release42-lambda.zip'
+    Type: String
+
+  ParamStageKey:
+    Type: String
+    Description: 'key for the stage'
+
+  ParamSnapshotIdentifier:
+    Type: String
+    Default: ''
+    Description: 'Identifier of possible Snapshot'
+
+  ParamCommitId:
+    Type: String
+    Default: ''
+    Description: 'Git commit ID'
+
+Conditions:
+  IsE2ETest: !Equals
+    - !Ref ParamStageName
+    - e2e
+  IsLoadTest: !Equals
+    - !Ref ParamStageName
+    - load
+  IsE2E: !Or [ Condition: IsE2ETest, Condition: IsLoadTest ]
+  IsNotE2E:
+    !Not [ Condition: IsE2E ]
+  IsMigrationActive: !Equals
+    - !Ref ParamMigrationActive
+    - true
+  IsSlackbotSecretEnabled: !Equals
+    - !Ref ParamEnableSlackbotSecret
+    - true
+  NotUseIdentifier: !Equals
+    - !Ref ParamSnapshotIdentifier
+    - ''
+
+Resources:
+  # region: aurora database
+
+  RDSSecret:
+    Type: AWS::SecretsManager::Secret
+    Properties:
+      KmsKeyId: !Ref ParamStageKey
+      Description: !Sub "This is a Secrets Manager secret for the ${ParamStageName}-RDS DB instance"
+      GenerateSecretString:
+        SecretStringTemplate: '{"username": "admin"}'
+        GenerateStringKey: "password"
+        PasswordLength: 16
+        ExcludeCharacters: '"@/\'
+
+  DatabaseSubnetGroup:
+    Type: AWS::RDS::DBSubnetGroup
+    Properties:
+      DBSubnetGroupDescription: "Subnet Group for release42 database"
+      SubnetIds: !GetAtt NetworkServiceSubnets.Values
+
+  DatabaseSecurityGroup:
+    Type: AWS::EC2::SecurityGroup
+    Properties:
+      GroupDescription: !Sub '${ParamBaseName}-${ParamStageName}-database'
+      Tags:
+        - Key: Name
+          Value: !Sub '${ParamBaseName}-${ParamStageName}-database'
+      VpcId: !Ref NetworkVpc
+
+  DatabaseSecurityRuleIn:
+    Type: AWS::EC2::SecurityGroupIngress
+    Properties:
+      SourceSecurityGroupId: !GetAtt ContainerSecurityGroup.GroupId
+      FromPort: 3306
+      GroupId: !Ref DatabaseSecurityGroup
+      IpProtocol: TCP
+      ToPort: 3306
+
+  DatabaseCPG:
+    Type: AWS::RDS::DBClusterParameterGroup
+    Properties:
+      Description: CPG for release42 database cluster
+      Family: aurora-mysql8.0
+      Parameters:
+        collation_connection: utf8_unicode_ci
+        collation_server: utf8_unicode_ci
+        character_set_server: utf8
+        character_set_filesystem: utf8
+        character_set_client: utf8
+        character_set_connection: utf8
+        character_set_database: utf8
+        character_set_results: utf8
+
+  DatabaseCluster:
+    Type: AWS::RDS::DBCluster
+    DependsOn:
+      - RDSSecret
+      - DatabaseSubnetGroup
+    Properties:
+      AvailabilityZones:
+        - eu-west-1a
+        - eu-west-1b
+        - eu-west-1c
+      BackupRetentionPeriod: 14
+      MasterUsername:
+        Fn::If:
+          - NotUseIdentifier
+          - !Join [ '', [ '{{resolve:secretsmanager:', !Ref RDSSecret, ':SecretString:username}}' ] ]
+          - Ref: AWS::NoValue
+      MasterUserPassword:
+        Fn::If:
+          - NotUseIdentifier
+          - !Join [ '', [ '{{resolve:secretsmanager:', !Ref RDSSecret, ':SecretString:password}}' ] ]
+          - Ref: AWS::NoValue
+      DBSubnetGroupName: !Ref DatabaseSubnetGroup
+      EnableCloudwatchLogsExports:
+        - general
+      DBClusterParameterGroupName: !Ref DatabaseCPG
+      DatabaseName: 'release42'
+      EnableHttpEndpoint: true
+      EnableIAMDatabaseAuthentication: true
+      Engine: aurora-mysql
+      EngineVersion: 8.0.mysql_aurora.3.01.0
+      EngineMode: provisioned
+      DeletionProtection: !Ref ParamDeletionProtection
+      StorageEncrypted: true
+      SnapshotIdentifier:
+        Fn::If:
+          - NotUseIdentifier
+          - Ref: AWS::NoValue
+          - Ref: ParamSnapshotIdentifier
+      KmsKeyId: !Ref ParamStageKey
+      VpcSecurityGroupIds:
+        - !GetAtt DatabaseSecurityGroup.GroupId
+
+  SecretRDSInstanceAttachment:
+    Type: AWS::SecretsManager::SecretTargetAttachment
+    DependsOn:
+      - DatabaseCluster
+      - RDSSecret
+    Properties:
+      SecretId: !Ref RDSSecret
+      TargetId: !Ref DatabaseCluster
+      TargetType: AWS::RDS::DBCluster
+
+  DatabaseCredentialsRotation:
+    Type: AWS::SecretsManager::RotationSchedule
+    Condition: IsNotE2E
+    DependsOn: SecretRDSInstanceAttachment
+    Properties:
+      SecretId: !Ref RDSSecret
+      RotateImmediatelyOnUpdate: false
+      HostedRotationLambda:
+        RotationType: MySQLSingleUser
+        RotationLambdaName: !Sub 'RDSSecretsManagerRotation-${ParamStageName}'
+        VpcSecurityGroupIds: !GetAtt ContainerSecurityGroup.GroupId
+        VpcSubnetIds: !Join [ ',', [ !Ref NetworkAppSubnet1, !Ref NetworkAppSubnet2, !Ref NetworkAppSubnet3 ] ]
+      RotationRules:
+        AutomaticallyAfterDays: 90
+
+  RDSDBInstance1:
+    Type: "AWS::RDS::DBInstance"
+    Properties:
+      AvailabilityZone: eu-west-1a
+      DBClusterIdentifier:
+        Ref: DatabaseCluster
+      DBInstanceClass: !Ref DBInstanceClass
+      Engine: aurora-mysql
+      PubliclyAccessible: "false"
+
+  RDSDBInstance2:
+    Type: "AWS::RDS::DBInstance"
+    Properties:
+      AvailabilityZone: eu-west-1b
+      DBClusterIdentifier:
+        Ref: DatabaseCluster
+      DBInstanceClass: !Ref DBInstanceClass
+      Engine: aurora-mysql
+      PubliclyAccessible: "false"
+
+  # endregion
+
+  Network:
+    Type: VWS::VPC::Standard::MODULE
+
+  Ingress:
+    Type: VWS::VPC::Ingress::MODULE
+    Properties:
+      VpcId: !Ref NetworkVpc
+      Subnets: !GetAtt [ NetworkPublicSubnets, Values ]
+      IncludeLogin: "true"
+      DomainName: !Sub ${ParamDomainname}
+      CertificateArn: !Sub ${ParamCertificateArn}
+      LogRetention: 30
+      TargetGroup: !Ref FrontendTargetGroup
+
+  HttpsProxy:
+    Type: VWS::Proxy::Instance
+    Properties:
+      AllowedSuffixes:
+        - !Sub 'public-keys.auth.elb.${AWS::Region}.amazonaws.com'
+        - slack.com
+        - slack-feedback-service.vwapps.run
+      AllowedPorts:
+        - 443
+
+  HttpsProxyCredentials:
+    Type: VWS::Proxy::Credentials
+    Properties:
+      Instance: !Ref HttpsProxy
+      Principals:
+        - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:root'
+
+  # region: cognito
+  Userpool:
+    Type: AWS::Cognito::UserPool
+    Condition: IsE2E
+    Properties:
+      Schema:
+        - Name: preferred_username
+          Required: true
+          Mutable: true
+        - Name: email
+          Required: true
+          Mutable: true
+        - Name: name
+          Required: true
+          Mutable: true
+        - Name: department_number
+          AttributeDataType: String
+          Required: false
+          Mutable: true
+        - Name: vwg_community
+          AttributeDataType: String
+          Required: false
+          Mutable: true
+        - Name: company_code
+          AttributeDataType: String
+          Required: false
+          Mutable: true
+        - Name: employee_type
+          AttributeDataType: String
+          Required: false
+          Mutable: true
+        - Name: cost_center
+          AttributeDataType: String
+          Required: false
+          Mutable: true
+        - Name: corporation
+          AttributeDataType: String
+          Required: false
+          Mutable: true
+        - Name: plant_number
+          AttributeDataType: String
+          Required: false
+          Mutable: true
+      AdminCreateUserConfig:
+        AllowAdminCreateUserOnly: True
+      UsernameConfiguration:
+        CaseSensitive: True
+      UserPoolName:  !If [IsE2ETest, 'E2E-Userpool', 'Load-Userpool']
+
+  UserPoolClient:
+    Type: AWS::Cognito::UserPoolClient
+    Condition: IsE2E
+    Properties:
+      AllowedOAuthFlows: [ 'code' ]
+      AllowedOAuthFlowsUserPoolClient: True
+      AllowedOAuthScopes: [ 'openid' ]
+      ExplicitAuthFlows:
+        - 'ALLOW_ADMIN_USER_PASSWORD_AUTH'
+        - 'ALLOW_USER_PASSWORD_AUTH'
+        - 'ALLOW_REFRESH_TOKEN_AUTH'
+      CallbackURLs: !If [IsE2ETest, [ 'https://e2e.release42-test.vwapps.run/oauth2/idpresponse' ], [ 'https://load.release42-test.vwapps.run/oauth2/idpresponse' ]]
+      ClientName: 'E2E-Client'
+      GenerateSecret: True
+      UserPoolId: !Ref Userpool
+      SupportedIdentityProviders: [ 'COGNITO' ]
+
+  UserPoolDomain:
+    Type: AWS::Cognito::UserPoolDomain
+    Condition: IsE2E
+    Properties:
+      Domain: !Sub 'release42-${ParamStageName}'
+      UserPoolId: !Ref Userpool
+
+  UserPoolUserTestUser:
+    Type: AWS::Cognito::UserPoolUser
+    Condition: IsE2E
+    Properties:
+      Username: 'TestUser'
+      UserAttributes:
+        - Name: preferred_username
+          Value: 'TestUser'
+        - Name: email
+          Value: 'release42.support.vwag.r.wob@volkswagen.de'
+        - Name: name
+          Value: 'Björn Biermann'
+        - Name: custom:department_number
+          Value: 'K-DIX-Q'
+        - Name: custom:vwg_community
+          Value: 'internal'
+        - Name: custom:company_code
+          Value: '0103'
+        - Name: custom:employee_type
+          Value: 'P'
+        - Name: custom:cost_center
+          Value: '8120'
+        - Name: custom:corporation
+          Value: 'Volkswagen AG'
+        - Name: custom:plant_number
+          Value: '11'
+      UserPoolId: !Ref Userpool
+
+  UserPoolUserVwStell:
+    Type: AWS::Cognito::UserPoolUser
+    Condition: IsE2E
+    Properties:
+      Username: 'vwstell'
+      UserAttributes:
+        - Name: preferred_username
+          Value: 'vwstell'
+        - Name: email
+          Value: 'release42.support.vwag.r.wob@volkswagen.de'
+        - Name: name
+          Value: 'Stefanie Schröder'
+        - Name: custom:department_number
+          Value: 'K-DIX-Q'
+        - Name: custom:vwg_community
+          Value: 'internal'
+        - Name: custom:company_code
+          Value: '0103'
+        - Name: custom:employee_type
+          Value: 'P'
+        - Name: custom:cost_center
+          Value: '8120'
+        - Name: custom:corporation
+          Value: 'Volkswagen AG'
+        - Name: custom:plant_number
+          Value: '11'
+      UserPoolId: !Ref Userpool
+
+  UserPoolUserVwApprv:
+    Type: AWS::Cognito::UserPoolUser
+    Condition: IsE2E
+    Properties:
+      Username: 'vwapprv'
+      UserAttributes:
+        - Name: preferred_username
+          Value: 'vwapprv'
+        - Name: email
+          Value: 'release42.support.vwag.r.wob@volkswagen.de'
+        - Name: name
+          Value: 'Guido Giesecke'
+        - Name: custom:department_number
+          Value: 'K-DIX-Q'
+        - Name: custom:vwg_community
+          Value: 'internal'
+        - Name: custom:company_code
+          Value: '0103'
+        - Name: custom:employee_type
+          Value: 'P'
+        - Name: custom:cost_center
+          Value: '8120'
+        - Name: custom:corporation
+          Value: 'Volkswagen AG'
+        - Name: custom:plant_number
+          Value: '11'
+      UserPoolId: !Ref Userpool
+  # endregion
+
+  FrontendTargetGroup:
+    Type: AWS::ElasticLoadBalancingV2::TargetGroup
+    Properties:
+      Port: 80
+      Protocol: 'HTTP'
+      TargetType: ip
+      VpcId: !Ref NetworkVpc
+      TargetGroupAttributes:
+        - Key: stickiness.enabled
+          Value: true
+        - Key: stickiness.type
+          Value: lb_cookie
+        - Key: 'deregistration_delay.timeout_seconds'
+          Value: 10
+
+  BackendTargetGroup:
+    Type: AWS::ElasticLoadBalancingV2::TargetGroup
+    DependsOn:
+      - IngressHttpsListener
+      - IngressLoadBalancer
+      - NetworkVpc
+    Properties:
+      HealthCheckPath: /api/health
+      HealthCheckPort: !Ref ParamBackendContainerPort
+      Port: !Ref ParamBackendContainerPort
+      Protocol: 'HTTP'
+      TargetType: ip
+      VpcId: !Ref NetworkVpc
+      TargetGroupAttributes:
+        - Key: 'deregistration_delay.timeout_seconds'
+          Value: 10
+        - Key: stickiness.enabled
+          Value: true
+        - Key: stickiness.type
+          Value: lb_cookie
+
+  BackendListenerRule:
+    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
+    Condition: IsNotE2E
+    DependsOn:
+      - IngressHttpsListener
+    Properties:
+      Actions:
+        - Type: authenticate-oidc
+          Order: 1
+          AuthenticateOidcConfig:
+            AuthorizationEndpoint: !GetAtt IngressLogin.AuthorizationEndpoint
+            ClientId: !Sub
+              - '{{resolve:secretsmanager:${SecretArn}:SecretString:client_id:AWSCURRENT:}}'
+              - SecretArn: !GetAtt [ IngressLogin, SecretArn ]
+            ClientSecret: !Sub
+              - '{{resolve:secretsmanager:${SecretArn}:SecretString:client_secret:AWSCURRENT:}}'
+              - SecretArn: !GetAtt [ IngressLogin, SecretArn ]
+            Issuer: !GetAtt IngressLogin.Issuer
+            OnUnauthenticatedRequest: deny
+            Scope: openid profile email
+            SessionCookieName: x-session
+            SessionTimeout: 28800
+            TokenEndpoint: !GetAtt IngressLogin.TokenEndpoint
+            UserInfoEndpoint: !GetAtt IngressLogin.UserInfoEndpoint
+        - Order: 2
+          Type: forward
+          TargetGroupArn: !Ref BackendTargetGroup
+      Conditions:
+        - Field: path-pattern
+          PathPatternConfig:
+            Values:
+              - /api/*
+              - /api
+      ListenerArn: !Ref IngressHttpsListenerLogin
+      Priority: 2
+
+  BackendListenerRuleE2E:
+    Type: AWS::ElasticLoadBalancingV2::ListenerRule
+    Condition: IsE2E
+    Properties:
+      Actions:
+        - Order: 1
+          Type: authenticate-cognito
+          AuthenticateCognitoConfig:
+            OnUnauthenticatedRequest: deny
+            UserPoolArn: !GetAtt Userpool.Arn
+            UserPoolClientId: !Ref UserPoolClient
+            UserPoolDomain: !Ref UserPoolDomain
+        - Order: 2
+          Type: forward
+          TargetGroupArn: !Ref BackendTargetGroup
+      Conditions:
+        - Field: path-pattern
+          PathPatternConfig:
+            Values:
+              - /api/*
+              - /api
+      ListenerArn: !Ref IngressHttpsListenerLogin
+      Priority: 2
+
+  FrontendListenerRuleE2E:
+    Type: AWS::ElasticLoadBalancingV2::ListenerRule
+    Condition: IsE2E
+    Properties:
+      Actions:
+        - Order: 1
+          Type: authenticate-cognito
+          AuthenticateCognitoConfig:
+            OnUnauthenticatedRequest: authenticate
+            UserPoolArn: !GetAtt Userpool.Arn
+            UserPoolClientId: !Ref UserPoolClient
+            UserPoolDomain: !Ref UserPoolDomain
+        - Order: 2
+          Type: forward
+          TargetGroupArn: !Ref FrontendTargetGroup
+      Conditions:
+        - Field: path-pattern
+          PathPatternConfig:
+            Values:
+              - '*'
+      ListenerArn: !Ref IngressHttpsListenerLogin
+      Priority: 3
+
+  LoadBalancerAlias:
+    Type: AWS::Route53::RecordSet
+    Properties:
+      HostedZoneId: !Sub ${ParamHostedZoneId}
+      Name: !Sub ${ParamDomainname}
+      Type: A
+      AliasTarget:
+        DNSName: !GetAtt [IngressLoadBalancer, DNSName]
+        HostedZoneId: !GetAtt [IngressLoadBalancer, CanonicalHostedZoneID]
+
+  # region: fargate
+
+  TaskExecutionRole:
+    Properties:
+      RoleName: !Sub 'TaskExecutionRole-${AWS::StackName}'
+      AssumeRolePolicyDocument:
+        Statement:
+          - Action: sts:AssumeRole
+            Effect: Allow
+            Principal:
+              Service: ecs-tasks.amazonaws.com
+        Version: '2012-10-17'
+      ManagedPolicyArns:
+        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
+      Policies:
+        - PolicyDocument:
+            Statement:
+              - Action:
+                  - secretsmanager:GetSecretValue
+                Effect: Allow
+                Resource:
+                  - !GetAtt HttpsProxyCredentials.SecretArn
+              - Action:
+                  - kms:Decrypt
+                  - kms:DescribeKey
+                  - secretsmanager:GetSecretValue
+                Effect: Allow
+                Resource:
+                  - "*"
+          PolicyName: !Sub 'AccessProxyCredentials-${AWS::StackName}'
+      Path: /
+    Type: AWS::IAM::Role
+
+  TaskRole:
+    Properties:
+      RoleName: !Sub 'TaskRole-${AWS::StackName}'
+      AssumeRolePolicyDocument:
+        Statement:
+          - Action: sts:AssumeRole
+            Effect: Allow
+            Principal:
+              Service: ecs-tasks.amazonaws.com
+        Version: '2012-10-17'
+      ManagedPolicyArns:
+        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AWSXrayWriteOnlyAccess'
+      Policies:
+        - PolicyDocument:
+            Statement:
+              - Action:
+                  - cloudwatch:GetMetricData
+                  - cloudwatch:GetMetricStatistics
+                  - cloudwatch:ListMetrics
+                  - cloudwatch:PutMetricAlarm
+                  - cloudwatch:PutMetricData
+                  - logs:DeleteMetricFilter
+                  - logs:DescribeMetricFilters
+                  - logs:PutMetricFilter
+                  - logs:TestMetricFilter
+                Effect: Allow
+                Resource:
+                  - "*"
+              - Action:
+                  - execute-api:Invoke
+                Effect: Allow
+                Resource:
+                  !If
+                    - IsE2E
+                    - 'arn:aws:execute-api:eu-west-1:806244116382:i130pf13mj/production/POST/create-feedback/C02PQ02SW6B' # release-42-feedback-e2e
+                    - 'arn:aws:execute-api:eu-west-1:806244116382:i130pf13mj/production/POST/create-feedback/C02GJM7AU5V' # release-42-feedback
+          PolicyName: !Sub 'CloudWatchLog-Metric-${AWS::StackName}'
+        - PolicyDocument:
+            Statement:
+              - Action:
+                  - ecs:*
+                  - ssmmessages:CreateControlChannel
+                  - ssmmessages:CreateDataChannel
+                  - ssmmessages:OpenControlChannel
+                  - ssmmessages:OpenDataChannel
+                Effect: Allow
+                Resource:
+                  - "*"
+          PolicyName: !Sub 'ssm-messages-${AWS::StackName}'
+        - PolicyDocument:
+            Statement:
+              - Action:
+                  -  "rds-db:connect"
+                Effect: Allow
+                Resource:
+                  - !Sub "arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:*/${DBName}"
+          PolicyName: !Sub 'rds-access-${AWS::StackName}'
+      Path: /
+    Type: AWS::IAM::Role
+
+  Cluster:
+    Properties:
+      ClusterName: !Sub '${ParamBaseName}-${ParamStageName}'
+      ClusterSettings:
+        - Name: containerInsights
+          Value: enabled
+    Type: AWS::ECS::Cluster
+
+  ContainerSecurityGroup:
+    Properties:
+      GroupDescription: !Sub '${ParamBaseName}-${ParamStageName}-http-proxy'
+      Tags:
+        - Key: Name
+          Value: !Sub '${ParamBaseName}-${ParamStageName}-http-proxy'
+      VpcId: !Ref NetworkVpc
+    Type: AWS::EC2::SecurityGroup
+
+  ContainerSecurityRuleIn:
+    Properties:
+      CidrIp: !Ref ParamCidrRange
+      FromPort: !Ref ParamFrontendContainerPort
+      GroupId: !Ref ContainerSecurityGroup
+      IpProtocol: TCP
+      ToPort: !Ref ParamFrontendContainerPort
+    Type: AWS::EC2::SecurityGroupIngress
+
+  ContainerSecurityRuleInBackend:
+    Properties:
+      CidrIp: !Ref ParamCidrRange
+      FromPort: !Ref ParamBackendContainerPort
+      GroupId: !Ref ContainerSecurityGroup
+      IpProtocol: TCP
+      ToPort: !Ref ParamBackendContainerPort
+    Type: AWS::EC2::SecurityGroupIngress
+
+  BackendE2EListenerWaitCondition:
+    Type: AWS::CloudFormation::WaitConditionHandle
+    Metadata:
+      IsReady: !If [ IsE2E, !Ref BackendListenerRuleE2E, "" ]
+
+  BackendListenerWaitCondition:
+    Type: AWS::CloudFormation::WaitConditionHandle
+    Metadata:
+      IsReady: !If [ IsNotE2E, !Ref BackendListenerRule, "" ]
+
+  FargateService:
+    DependsOn:
+      - IngressHttpsListener
+      - VpcEndpointEcrApi
+      - VpcEndpointCloudwatchLogs
+      - VpcEndpointEcrDkr
+      - BackendE2EListenerWaitCondition
+      - BackendListenerWaitCondition
+      - CreateDBUser
+    Properties:
+      Cluster: !Ref Cluster
+      DesiredCount: !Ref ParamTaskMinContainerCount
+      LaunchType: FARGATE
+      DeploymentConfiguration:
+        DeploymentCircuitBreaker:
+          Enable: true
+          Rollback: true
+        MaximumPercent: 200
+        MinimumHealthyPercent: 100
+      HealthCheckGracePeriodSeconds: 50
+      LoadBalancers:
+        - ContainerName: Release42-frontend
+          ContainerPort: !Ref ParamFrontendContainerPort
+          TargetGroupArn: !Ref FrontendTargetGroup
+        - ContainerName: Release42-backend
+          ContainerPort: !Ref ParamBackendContainerPort
+          TargetGroupArn: !Ref BackendTargetGroup
+      NetworkConfiguration:
+        AwsvpcConfiguration:
+          AssignPublicIp: DISABLED
+          SecurityGroups:
+            - !Ref ContainerSecurityGroup
+          Subnets: !GetAtt [ NetworkAppSubnets, Values ]
+      PlatformVersion: !Ref ParamFargatePlatformVersion
+      TaskDefinition: !Ref FargateTaskDefinition
+      EnableExecuteCommand: true
+    Type: AWS::ECS::Service
+
+  FargateBastionService:
+    DependsOn:
+      - IngressHttpsListener
+      - VpcEndpointEcrApi
+      - VpcEndpointCloudwatchLogs
+      - VpcEndpointEcrDkr
+    Properties:
+      Cluster: !Ref Cluster
+      DesiredCount: 1
+      LaunchType: FARGATE
+      DeploymentConfiguration:
+        DeploymentCircuitBreaker:
+          Enable: true
+          Rollback: true
+        MaximumPercent: 200
+        MinimumHealthyPercent: 100
+      NetworkConfiguration:
+        AwsvpcConfiguration:
+          AssignPublicIp: DISABLED
+          SecurityGroups:
+            - !Ref ContainerSecurityGroup
+          Subnets: !GetAtt [ NetworkAppSubnets, Values ]
+      PlatformVersion: !Ref ParamFargatePlatformVersion
+      TaskDefinition: !Ref FargateBastionTaskDefinition
+      EnableExecuteCommand: true
+    Type: AWS::ECS::Service
+
+  AppServiceScalableTarget:
+    Type: AWS::ApplicationAutoScaling::ScalableTarget
+    Properties:
+      MaxCapacity: 4
+      MinCapacity: 2
+      ResourceId: !Sub 'service/${Cluster}/${FargateService.Name}'
+      RoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'
+      ScalableDimension: ecs:service:DesiredCount
+      ServiceNamespace: ecs
+      ScheduledActions:
+        - Schedule: 'cron(0 20 * * ? *)'
+          ScheduledActionName: scaleInOnNight
+          ScalableTargetAction:
+            MinCapacity: 1
+          Timezone: Europe/Berlin
+        - Schedule: 'cron(0 7 * * ? *)'
+          ScheduledActionName: scaleOutOnMorning
+          ScalableTargetAction:
+            MinCapacity: 2
+          Timezone: Europe/Berlin
+
+  AppServiceScale:
+    Type: AWS::ApplicationAutoScaling::ScalingPolicy
+    Properties:
+      PolicyName: ScaleRelease42
+      PolicyType: TargetTrackingScaling
+      ScalingTargetId: !Ref AppServiceScalableTarget
+      TargetTrackingScalingPolicyConfiguration:
+        PredefinedMetricSpecification:
+          PredefinedMetricType: ECSServiceAverageCPUUtilization
+        TargetValue: 75
+
+  FargateXrayLogGroup:
+    Properties:
+      LogGroupName: !Sub 'volkswagen/release42/${ParamStageName}/xray'
+      RetentionInDays: 30
+    Type: AWS::Logs::LogGroup
+
+  FargateBastionHostLogGroup:
+    Properties:
+      LogGroupName: !Sub 'volkswagen/release42/${ParamStageName}/bastion-host'
+      RetentionInDays: 30
+    Type: AWS::Logs::LogGroup
+
+  FargateFrontendLogGroup:
+    Properties:
+      LogGroupName: !Sub 'volkswagen/release42/${ParamStageName}/frontend'
+      RetentionInDays: 30
+    Type: AWS::Logs::LogGroup
+
+  FargateBackendLogGroup:
+    Properties:
+      LogGroupName: !Sub 'volkswagen/release42/${ParamStageName}/backend'
+      RetentionInDays: 30
+    Type: AWS::Logs::LogGroup
+
+  FargateTaskDefinition:
+    DependsOn:
+     - FrontendTargetGroup
+    Properties:
+      ContainerDefinitions:
+        - Environment: #frontend
+            - Name: StageName
+              Value: !Ref ParamStageName
+            - Name: PORT
+              Value: !Ref ParamFrontendContainerPort
+            - Name: AWS_XRAY_DAEMON_ADDRESS
+              Value: "xray-daemon:2000"
+          Essential: true
+          Image: !Sub '${ParamFrontendRepository}:c.${ParamCommitId}'
+          LogConfiguration:
+            LogDriver: awslogs
+            Options:
+              awslogs-group: !Ref FargateFrontendLogGroup
+              awslogs-region: !Ref AWS::Region
+              awslogs-stream-prefix: fargate
+          Name: Release42-frontend
+          PortMappings:
+            - ContainerPort: !Ref ParamFrontendContainerPort
+          Ulimits:
+            - Name: nofile
+              HardLimit: 65536
+              SoftLimit: 65536
+        - Environment: #backend
+            - Name: StageName
+              Value: !Ref ParamStageName
+            - Name: PORT
+              Value: !Ref ParamBackendContainerPort
+            - Name: spring.datasource.url
+              Value: !Sub 'jdbc:mysql:aws://${DatabaseCluster.Endpoint.Address}:${DatabaseCluster.Endpoint.Port}/${DBName}?useAwsIam=true&useSSL=true&requireSSL=true&verifyServerCertificate=true&user=${DBUserName}'
+            - Name: keyserver
+              Value: !Sub 'https://public-keys.auth.elb.${AWS::Region}.amazonaws.com'
+            - Name: PROXY_CREDENTIALS_ENDPOINT
+              Value: !Sub "${HttpsProxy.DnsName}:8080"
+            - Name: PROXY_CREDENTIALS_HOST
+              Value: !Sub "${HttpsProxy.DnsName}"
+            - Name: PROXY_CREDENTIALS_PORT
+              Value: "8080"
+            - Name: JAVA_OPTS    # the jvm may use up to 135% of the heap
+              Value: !Sub "-Xmx${ParamJvmContainerXmx}m -Xms256m"
+            - Name: SLACK_FEEDBACK_CHANNEL_ID
+              Value: !Ref ParamSlackFeedbackChannelId
+            - Name: SLACK_FEEDBACK_ENDPOINT
+              Value: !Ref ParamSlackFeedbackServiceEndpoint
+            - Name: SLACK_FEEDBACK_REGION
+              Value: !Ref ParamSlackFeedbackServiceRegion
+            - Name: DISABLE_START
+              Value: !Ref ParamDisableStart
+          Secrets:
+            - Name: PROXY_CREDENTIALS_PASSWORD
+              ValueFrom: !Sub "${HttpsProxyCredentials.SecretArn}:password::"
+            - Name: PROXY_CREDENTIALS_USER
+              ValueFrom: !Sub "${HttpsProxyCredentials.SecretArn}:username::"
+          Essential: true
+          Image: !Sub '${ParamBackendRepository}:c.${ParamCommitId}'
+          LogConfiguration:
+            LogDriver: awslogs
+            Options:
+              awslogs-group: !Ref FargateBackendLogGroup
+              awslogs-region: !Ref AWS::Region
+              awslogs-stream-prefix: fargate
+          Name: Release42-backend
+          PortMappings:
+            - ContainerPort: !Ref ParamBackendContainerPort
+          Ulimits:
+            - Name: nofile
+              HardLimit: 65536
+              SoftLimit: 65536
+        - Environment: [ ] #xray
+          Essential: true
+          Image: !Sub '${ParamXrayRepository}:${ParamXrayTag}'
+          LogConfiguration:
+            LogDriver: awslogs
+            Options:
+              awslogs-group: !Ref FargateXrayLogGroup
+              awslogs-region: !Ref AWS::Region
+              awslogs-stream-prefix: fargate
+          Name: VwsXRaySidecar
+          PortMappings:
+            - ContainerPort: 2000
+              Protocol: UDP
+      Cpu: !Ref ParamContainerCpu
+      ExecutionRoleArn: !GetAtt [ TaskExecutionRole, Arn ]
+      Family: !Sub '${ParamContainerFamily}-${ParamStageName}'
+      Memory: !Ref ParamContainerMemory
+      NetworkMode: awsvpc
+      RequiresCompatibilities:
+        - FARGATE
+      TaskRoleArn: !GetAtt [ TaskRole, Arn ]
+    Type: AWS::ECS::TaskDefinition
+
+  FargateBastionTaskDefinition:
+    DependsOn:
+     - FrontendTargetGroup
+    Properties:
+      ContainerDefinitions:
+        - Environment: [ ] #bastion-host
+          Essential: true
+          Image: !Sub '${ParamBastionHostRepository}:${ParamBastionHostTag}'
+          LogConfiguration:
+            LogDriver: awslogs
+            Options:
+              awslogs-group: !Ref FargateBastionHostLogGroup
+              awslogs-region: !Ref AWS::Region
+              awslogs-stream-prefix: fargate
+          Name: VwsBastionHost
+      Cpu: !Ref ParamBastionContainerCpu
+      ExecutionRoleArn: !GetAtt [ TaskExecutionRole, Arn ]
+      Family: !Sub '${ParamContainerFamily}-${ParamStageName}-BastionHost'
+      Memory: !Ref ParamBastionContainerMemory
+      NetworkMode: awsvpc
+      RequiresCompatibilities:
+        - FARGATE
+      TaskRoleArn: !GetAtt [ TaskRole, Arn ]
+    Type: AWS::ECS::TaskDefinition
+
+  VpcEndpointEcrDkr:
+    Properties:
+      PrivateDnsEnabled: true
+      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.dkr'
+      VpcEndpointType: Interface
+      SecurityGroupIds:
+        - !Ref EndpointSecurityGroup
+      SubnetIds: !GetAtt [NetworkServiceSubnets, Values]
+      VpcId: !Ref NetworkVpc
+    Type: AWS::EC2::VPCEndpoint
+
+  S3Endpoint:
+    Type: AWS::EC2::VPCEndpoint
+    Properties:
+      RouteTableIds:
+        - !Ref NetworkRouteTablePrivate
+      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
+      VpcEndpointType: Gateway
+      VpcId: !Ref NetworkVpc
+
+  XrayEndpoint:
+    Type: AWS::EC2::VPCEndpoint
+    Properties:
+      PrivateDnsEnabled: true
+      SecurityGroupIds:
+        - !Ref EndpointSecurityGroup
+      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.xray'
+      SubnetIds: !GetAtt [ NetworkServiceSubnets, Values ]
+      VpcEndpointType: Interface
+      VpcId: !Ref NetworkVpc
+
+  MonitoringEndpoint:
+    Type: AWS::EC2::VPCEndpoint
+    Properties:
+      PrivateDnsEnabled: true
+      SecurityGroupIds:
+        - !Ref EndpointSecurityGroup
+      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.monitoring'
+      SubnetIds: !GetAtt [ NetworkServiceSubnets, Values ]
+      VpcEndpointType: Interface
+      VpcId: !Ref NetworkVpc
+
+  VpcEndpointEcrApi:
+    Properties:
+      PrivateDnsEnabled: true
+      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.api'
+      VpcEndpointType: Interface
+      SecurityGroupIds:
+        - !Ref EndpointSecurityGroup
+      SubnetIds: !GetAtt [NetworkServiceSubnets, Values]
+      VpcId: !Ref NetworkVpc
+    Type: AWS::EC2::VPCEndpoint
+
+  VpcEndpointCloudwatchLogs:
+    Properties:
+      PrivateDnsEnabled: true
+      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.logs'
+      VpcEndpointType: Interface
+      SecurityGroupIds:
+        - !Ref EndpointSecurityGroup
+      SubnetIds: !GetAtt [ NetworkServiceSubnets, Values ]
+      VpcId: !Ref NetworkVpc
+    Type: AWS::EC2::VPCEndpoint
+
+  VpcEndpointSecretsmanager:
+    Properties:
+      PrivateDnsEnabled: true
+      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.secretsmanager'
+      VpcEndpointType: Interface
+      SecurityGroupIds:
+        - !Ref EndpointSecurityGroup
+      SubnetIds: !GetAtt [ NetworkServiceSubnets, Values ]
+      VpcId: !Ref NetworkVpc
+    Type: AWS::EC2::VPCEndpoint
+
+  SSNNessagesEndpoint:
+    Properties:
+      PrivateDnsEnabled: true
+      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssmmessages'
+      VpcEndpointType: Interface
+      SecurityGroupIds:
+        - !Ref EndpointSecurityGroup
+      SubnetIds: !GetAtt [ NetworkServiceSubnets, Values ]
+      VpcId: !Ref NetworkVpc
+    Type: AWS::EC2::VPCEndpoint
+
+  RDSEndpoint:
+    Properties:
+      PrivateDnsEnabled: true
+      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.rds'
+      VpcEndpointType: Interface
+      SecurityGroupIds:
+        - !Ref EndpointSecurityGroup
+      SubnetIds: !GetAtt [ NetworkServiceSubnets, Values ]
+      VpcId: !Ref NetworkVpc
+    Type: AWS::EC2::VPCEndpoint
+
+  VpcEndpointHttpsProxy:
+    Properties:
+      PrivateDnsEnabled: true
+      ServiceName: !GetAtt [HttpsProxy, ServiceName]
+      VpcEndpointType: Interface
+      SecurityGroupIds:
+        - !Ref HttpsProxySecurityGroup
+      SubnetIds: !GetAtt [ NetworkServiceSubnets, Values ]
+      VpcId: !Ref NetworkVpc
+    Type: AWS::EC2::VPCEndpoint
+
+  HttpsProxySecurityGroup:
+    Properties:
+      GroupDescription: !Sub '${AWS::StackName}-proxy'
+      VpcId: !Ref NetworkVpc
+    Type: AWS::EC2::SecurityGroup
+
+  HttpProxySecurityRuleIn:
+    Properties:
+      CidrIp: !Ref ParamCidrRange
+      FromPort: 8080
+      GroupId: !Ref HttpsProxySecurityGroup
+      IpProtocol: TCP
+      ToPort: 8080
+    Type: AWS::EC2::SecurityGroupIngress
+
+  EndpointSecurityGroup:
+    Properties:
+      GroupDescription: !Sub '${AWS::StackName}-endpoint-security'
+      Tags:
+        - Key: Name
+          Value: !Sub '${AWS::StackName}-endpoint-security'
+      VpcId: !Ref NetworkVpc
+    Type: AWS::EC2::SecurityGroup
+
+  EndpointHttpsRule:
+    Properties:
+      CidrIp: !Ref ParamCidrRange
+      FromPort: 443
+      GroupId: !Ref EndpointSecurityGroup
+      IpProtocol: TCP
+      ToPort: 443
+    Type: AWS::EC2::SecurityGroupIngress
+  # endregion
+
+
+  # region: create user
+  CreateDBUserFunction:
+    Type: AWS::Serverless::Function
+    DependsOn:
+      - DatabaseCluster
+      - RDSDBInstance1
+      - RDSDBInstance2
+    Properties:
+      CodeUri:
+        Bucket: !Sub ${ParamS3BucketName}
+        Key: !Sub ${ParamS3BucketKey}
+      Handler: com.volkswagen.release42.CreateDBUserExecutor::handleRequest
+      Description: Create a new DB User
+      MemorySize: 512
+      PackageType: Zip
+      # Function's execution role
+      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LambdaExecutionRole'
+      ReservedConcurrentExecutions: 1
+      Runtime: java11
+      Timeout: 60
+      Tracing: Active
+      VpcConfig:
+        SecurityGroupIds:
+          - !Ref ContainerSecurityGroup
+        SubnetIds: !GetAtt [ NetworkAppSubnets, Values ]
+
+  CreateDBUser:
+    DependsOn:
+      - NetworkServiceNaclAssociation1
+      - NetworkServiceNaclAssociation2
+      - NetworkServiceNaclAssociation3
+      - NetworkServiceAllowAppIngress1
+      - NetworkServiceAllowAppIngress2
+      - NetworkServiceAllowAppIngress3
+      - NetworkPrivateRouteTableAssociationApp1
+      - NetworkPrivateRouteTableAssociationApp2
+      - NetworkPrivateRouteTableAssociationApp3
+      - NetworkPrivateRouteTableAssociationService1
+      - NetworkPrivateRouteTableAssociationService2
+      - NetworkPrivateRouteTableAssociationService3
+      - S3Endpoint
+    Type: Custom::CreateDBUser
+    Properties:
+      ServiceToken: !GetAtt CreateDBUserFunction.Arn
+      SecretId: !Sub "${RDSSecret}"
+      Username: !Sub "${DBUserName}"
+      Database: !Sub "${DBName}"
+      DataSourceUrl: !Sub 'jdbc:mysql:aws://${DatabaseCluster.Endpoint.Address}:${DatabaseCluster.Endpoint.Port}/${DBName}?useSSL=true'
+      Version: 3
+
+  # endregion
+
+  # region: migration
+  DeleteOldSnapshots:
+    Condition: IsMigrationActive
+    Type: AWS::Serverless::Function
+    Properties:
+      Handler: index.handler
+      Runtime: python3.9
+      InlineCode: |
+        import json
+        import boto3
+        import os
+        def lambda_handler(event, context):
+          clusterId = os.environ['cluster_id']
+          client = boto3.client('rds')
+          response = client.response = client.describe_db_cluster_snapshots(
+            DBClusterIdentifier=clusterId,
+            SnapshotType='manual')
+          keep_snapshot_count = 14
+          snapshots = sorted(response['DBClusterSnapshots'], key=lambda d: d['SnapshotCreateTime'], reverse=True)
+          for snapshot in snapshots[keep_snapshot_count:]:
+            print('Delete Snapshot:', snapshot['DBClusterSnapshotIdentifier'])
+            client.delete_db_cluster_snapshot(DBClusterSnapshotIdentifier=snapshot['DBClusterSnapshotIdentifier'])
+          return {
+            'statusCode': 200,
+            'body': json.dumps('Snapshot deleted')
+          }
+      Timeout: 30
+      Environment:
+        Variables:
+          cluster_id: !Ref DatabaseCluster
+      # Function's execution role
+      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LambdaExecutionRole'
+      Tracing: Active
+      VpcConfig:
+        SecurityGroupIds:
+          - !Ref ContainerSecurityGroup
+        SubnetIds: !GetAtt [ NetworkAppSubnets, Values ]
+
+  Migration:
+    Condition: IsMigrationActive
+    Type: AWS::Serverless::Function
+    Properties:
+      CodeUri:
+        Bucket: !Sub ${ParamS3BucketName}
+        Key: !Sub ${ParamS3BucketKey}
+      Handler: com.volkswagen.release42.MigrationExecutor::handleRequest
+      Description: Migrates database
+      Environment:
+        Variables:
+          secret_id: !Sub "${RDSSecret}"
+          datasource_url: !Sub 'jdbc:mysql:aws://${DatabaseCluster.Endpoint.Address}:${DatabaseCluster.Endpoint.Port}/${DBName}?useSSL=true'
+      MemorySize: 512
+      PackageType: Zip
+      # Function's execution role
+      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LambdaExecutionRole'
+      ReservedConcurrentExecutions: 1
+      Runtime: java11
+      Timeout: 60
+      Tracing: Active
+      VpcConfig:
+        SecurityGroupIds:
+          - !Ref ContainerSecurityGroup
+        SubnetIds: !GetAtt [ NetworkAppSubnets, Values ]
+
+  MigrationStateMachine:
+    Condition: IsMigrationActive
+    Type: AWS::Serverless::StateMachine
+    DependsOn:
+      - Migration
+    Properties:
+      Definition:
+        Comment: Migration Statemachine
+        StartAt: DeleteOldSnapshots
+        States:
+          DeleteOldSnapshots:
+            Type: Task
+            Next: CreateDBClusterSnapshot
+            Resource: arn:aws:states:::lambda:invoke
+            Parameters:
+              Payload.$: $
+              FunctionName: ${DeleteOldSnapshots}
+            Retry:
+              - ErrorEquals:
+                  - Lambda.ServiceException
+                  - Lambda.AWSLambdaException
+                  - Lambda.SdkClientException
+                IntervalSeconds: 2
+                MaxAttempts: 6
+                BackoffRate: 2
+          CreateDBClusterSnapshot:
+            Type: Task
+            Next: Migration
+            Parameters:
+              DbClusterIdentifier: !Ref DatabaseCluster
+              DbClusterSnapshotIdentifier: !Sub '${ParamStageName}-migration-${ParamCommitId}'
+            Resource: arn:aws:states:::aws-sdk:rds:createDBClusterSnapshot
+          Migration:
+            Type: Task
+            Resource: arn:aws:states:::lambda:invoke
+            Parameters:
+              Payload.$: $
+              FunctionName: ${Migration}
+            Retry:
+              - ErrorEquals:
+                  - Lambda.ServiceException
+                  - Lambda.AWSLambdaException
+                  - Lambda.SdkClientException
+                IntervalSeconds: 2
+                MaxAttempts: 6
+                BackoffRate: 2
+            End: true
+      DefinitionSubstitutions:
+        Migration: !Ref Migration
+      Name: !Sub 'MigrationStateMachine-${ParamStageName}'
+      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LambdaExecutionRole'
+      Tracing:
+        Enabled: true
+  # endregion
+
+  # region: DashboardLambda
+  GetUsers:
+    Condition: IsNotE2E
+    Type: AWS::Serverless::Function
+    Properties:
+      CodeUri:
+        Bucket: !Sub ${ParamS3BucketName}
+        Key: !Sub ${ParamS3BucketKey}
+      Handler: com.volkswagen.release42.GetTotalUsers::handleRequest
+      Description: Get users over time
+      Environment:
+        Variables:
+          secret_id: !Sub "${RDSSecret}"
+          datasource_url: !Sub 'jdbc:mysql:aws://${DatabaseCluster.Endpoint.Address}:${DatabaseCluster.Endpoint.Port}/${DBName}?useSSL=true'
+      MemorySize: 512
+      PackageType: Zip
+      # Function's execution role
+      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LambdaExecutionRole'
+      ReservedConcurrentExecutions: 1
+      Runtime: java11
+      Timeout: 60
+      Tracing: Active
+      VpcConfig:
+        SecurityGroupIds:
+          - !Ref ContainerSecurityGroup
+        SubnetIds: !GetAtt [ NetworkAppSubnets, Values ]
+
+  GetProjectsOverTime:
+    Condition: IsNotE2E
+    Type: AWS::Serverless::Function
+    Properties:
+      CodeUri:
+        Bucket: !Sub ${ParamS3BucketName}
+        Key: !Sub ${ParamS3BucketKey}
+      Handler: com.volkswagen.release42.GetProjectsOverTime::handleRequest
+      Description: Gets projects over time
+      Environment:
+        Variables:
+          secret_id: !Sub "${RDSSecret}"
+          datasource_url: !Sub 'jdbc:mysql:aws://${DatabaseCluster.Endpoint.Address}:${DatabaseCluster.Endpoint.Port}/${DBName}?useSSL=true'
+      MemorySize: 512
+      PackageType: Zip
+      # Function's execution role
+      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LambdaExecutionRole'
+      ReservedConcurrentExecutions: 1
+      Runtime: java11
+      Timeout: 60
+      Tracing: Active
+      VpcConfig:
+        SecurityGroupIds:
+          - !Ref ContainerSecurityGroup
+        SubnetIds: !GetAtt [ NetworkAppSubnets, Values ]
+  # endregion
+
+  # region: alerting
+  AWSSlackNotificationWebHook:
+    Condition: IsSlackbotSecretEnabled
+    Type: AWS::SecretsManager::Secret
+    Properties:
+      Name: AWSSlackNotificationWebHook
+      Description: 'For changes go to: https://api.slack.com/apps/A028QF869FH/general'
+      SecretString: '{"webhook-url":""}'
+      KmsKeyId: !Ref ParamStageKey
+
+  SlackBot:
+    Condition: IsNotE2E
+    Type: AWS::Serverless::Application
+    Properties:
+      Location:
+        ApplicationId: 'arn:aws:serverlessrepo:eu-west-1:637378239786:applications/vws-aws-slack-bot'
+        SemanticVersion: 0.0.18
+      Parameters:
+        VpcId: !Ref NetworkVpc
+        SubnetId: !Select [ 0, !GetAtt [ NetworkAppSubnets, Values ]]
+        WebhookUrl: !Sub
+          - '{{resolve:secretsmanager:${SecretArn}:SecretString:webhook-url}}'
+          - SecretArn: !Ref AWSSlackNotificationWebHook
+        ProxyUrl: !Sub
+          - "http://${Username}:${Password}@${Host}"
+          - Host: proxy.resources.vwapps.cloud:8080
+            Username: !Sub
+              - '{{resolve:secretsmanager:${SecretArn}:SecretString:username}}'
+              - SecretArn: !GetAtt [ HttpsProxyCredentials, SecretArn ]
+            Password: !Sub
+              - '{{resolve:secretsmanager:${SecretArn}:SecretString:password}}'
+              - SecretArn: !GetAtt [ HttpsProxyCredentials, SecretArn ]
+
+  5XXErrorsAlarm:
+    Condition: IsNotE2E
+    Type: AWS::CloudWatch::Alarm
+    Properties:
+      AlarmDescription: "Notify if there are 5XX errors"
+      AlarmName: !Sub '${ParamStageName}-5XXErrorsAlarm'
+      ComparisonOperator: GreaterThanOrEqualToThreshold
+      Dimensions:
+        - Name: LoadBalancer
+          Value: !GetAtt IngressLoadBalancer.LoadBalancerFullName
+      EvaluationPeriods: 1
+      MetricName: "HTTPCode_Target_5XX_Count"
+      Namespace: AWS/ApplicationELB
+      Period: 60
+      Statistic: Sum
+      Threshold: 1
+      TreatMissingData: notBreaching
+
+  TargetResponseTimeAlarm:
+    Condition: IsNotE2E
+    Type: AWS::CloudWatch::Alarm
+    Properties:
+      AlarmDescription: "Notify if there are greater target response times"
+      AlarmName: !Sub '${ParamStageName}-TargetResponseTimeAlarm'
+      ComparisonOperator: GreaterThanThreshold
+      Dimensions:
+        - Name: LoadBalancer
+          Value: !GetAtt IngressLoadBalancer.LoadBalancerFullName
+      EvaluationPeriods: 1
+      MetricName: "TargetResponseTime"
+      Namespace: AWS/ApplicationELB
+      Period: 60
+      Statistic: Average
+      Threshold: 1
+      TreatMissingData: notBreaching
+
+  SlackAlert:
+    Condition: IsNotE2E
+    Type: AWS::Events::Rule
+    Properties:
+      Description: EventRule
+      EventPattern:
+        detail:
+          alarmName:
+            - !Ref 5XXErrorsAlarm
+            - !Ref TargetResponseTimeAlarm
+          state:
+            value:
+              - ALARM
+        detail-type:
+          - CloudWatch Alarm State Change
+        source:
+          - aws.cloudwatch
+      State: ENABLED
+      Targets:
+        - Arn: !GetAtt SlackBot.Outputs.LambdaFunctionArn
+          Id: !GetAtt SlackBot.Outputs.LambdaFunction
+          InputTransformer:
+            InputPathsMap:
+              alarmName: $.detail.alarmName
+              reason: $.detail.state.reason
+              account: $.account
+              region: $.region
+            InputTemplate: !Sub |
+              {
+                "channel": "${SlackChannel}",
+                "username": "${SlackUser}",
+                "attachments": [{
+                  "title": "Alarm <alarmName>",
+                  "color": "#F50727",
+                  "fields": [{
+                    "title": "Reason",
+                    "value": "<reason>",
+                    "short": false
+                  }, {
+                    "title": "Account",
+                    "value": "<account>",
+                    "short": true
+                  }, {
+                    "title": "Region",
+                    "value": "<region>",
+                    "short": true
+                  }]
+                }]
+              }
+  # endregion
+
+  # region: metrics
+  DevOpsDashboard:
+    Type: AWS::CloudWatch::Dashboard
+    Properties:
+      DashboardBody: !Sub
+        - |+
+          {
+            "start": "-PT7D",
+            "periodOverride": "inherit",
+            "widgets": [
+              {
+                "type":"metric",
+                "x":0,
+                "y":0,
+                "width":12,
+                "height":6,
+                "properties":{
+                  "metrics":[
+                    [ "AWS/ECS", "CPUUtilization", "ServiceName", "${ServiceName}", "ClusterName", "${ClusterName}" ],
+                    [ "AWS/ECS", "MemoryUtilization", "ServiceName", "${ServiceName}", "ClusterName", "${ClusterName}" ]
+                  ],
+                  "period":300,
+                  "stat":"Average",
+                  "region":"eu-west-1",
+                  "title":"ECS Instance CPU/Memory",
+                  "liveData": false,
+                  "legend": {
+                    "position": "bottom"
+                  }
+                }
+              },
+              {
+                "type":"metric",
+                "width":3,
+                "height":3,
+                "properties":{
+                  "metrics": [
+                      [ "AWS/ApplicationELB", "RequestCount", "LoadBalancer", "${LoadBalancer}" ]
+                  ],
+                  "title":"RequestCount",
+                  "view": "singleValue",
+                  "region": "eu-west-1",
+                  "stat": "Sum",
+                  "period": 86400
+                }
+              },
+              {
+                "type":"metric",
+                "width":3,
+                "height":3,
+                "properties":{
+                  "metrics": [
+                      [ "AWS/ApplicationELB", "NonStickyRequestCount", "LoadBalancer", "${LoadBalancer}" ]
+                  ],
+                  "title":"NonStickyRequestCount",
+                  "view": "singleValue",
+                  "region": "eu-west-1",
+                  "stat": "Sum",
+                  "period": 86400
+                }
+              },
+              {
+                "type": "metric",
+                "x": 12,
+                "y": 3,
+                "width": 10,
+                "height": 6,
+                "properties": {
+                  "title": "Thread Info",
+                  "metrics": [
+                    [ "Jvm-${StageName}", "jvm.threads.live.value", { "label": "Threads (daemon and non-daemon)" } ],
+                    [ ".", "jvm.threads.states.value", "state", "timed-waiting", { "label": "Threads in status TIMED_WAITING" } ],
+                    [ "...", "waiting", { "label": "Threads in status WAITING" } ]
+                  ],
+                  "view": "timeSeries",
+                  "stacked": false,
+                  "region": "eu-west-1",
+                  "stat": "Average",
+                  "period": 60,
+                  "yAxis": {
+                    "left": {
+                      "showUnits": false,
+                      "label": "Count"
+                    }
+                  }
+                }
+              }
+            ]
+          }
+        - ServiceName: !GetAtt FargateService.Name
+          ClusterName: !Ref Cluster
+          LoadBalancer: !GetAtt IngressLoadBalancer.LoadBalancerFullName
+          StageName: !Sub '${ParamStageName}'
+      DashboardName: !Sub 'DevOps-${ParamStageName}'
+
+  UxDashboard:
+    Condition: IsNotE2E
+    Type: AWS::CloudWatch::Dashboard
+    Properties:
+      DashboardBody: !Sub
+        - |+
+          {
+            "widgets": [
+              {
+                "type": "custom",
+                "x": 0,
+                "y": 0,
+                "width": 6,
+                "height": 6,
+                "properties": {
+                  "endpoint": "${UsersArn}",
+                  "updateOn": {
+                    "refresh": true,
+                    "resize": true,
+                    "timeRange": true
+                  }
+                }
+              },
+              {
+                "type": "custom",
+                "x": 0,
+                "y": 0,
+                "width": 6,
+                "height": 6,
+                "properties": {
+                  "endpoint": "${ProjectsOverTimeArn}",
+                  "updateOn": {
+                    "refresh": true,
+                    "resize": true,
+                    "timeRange": true
+                  }
+                }
+              }
+            ]
+          }
+        - UsersArn: !GetAtt GetUsers.Arn
+          ProjectsOverTimeArn: !GetAtt GetProjectsOverTime.Arn
+      DashboardName: !Sub 'UX-${ParamStageName}'
+  # endregion
+
+Outputs:
+  PublicSubnets:
+    Description: 'PublicSubnets'
+    Value: !Join [',', !GetAtt NetworkPublicSubnets.Values]
+  VcpId:
+    Description: 'VpcId'
+    Value: !Ref NetworkVpc
+  SecurityGroup:
+    Description: 'SecurityGroup'
+    Value: !Ref IngressSecurityGroup
+  MigrationStateMachine:
+    Condition: IsMigrationActive
+    Description: 'MigrationStatemachine'
+    Value: !Ref MigrationStateMachine
+  UserPoolId:
+    Condition: IsE2E
+    Description: 'ID of the UserPool'
+    Value: !Ref UserPoolClient
diff --git a/packaged-template.yaml b/packaged-template.yaml
new file mode 100644
index 0000000..868c828
--- /dev/null
+++ b/packaged-template.yaml
@@ -0,0 +1,32 @@
+AWSTemplateFormatVersion: 2010-09-09
+Parameters:
+  Env:
+    Default: staging
+    ConstraintDescription: ''
+    Type: String
+    Description: target Environment name
+  ServiceName:
+    Type: String
+    Description: Service name for service account
+    Default: test
+  OidcId:
+    Type: String
+    Description: Oidc ID
+    Default: staging-storage-s3
+  Namespace:
+    Type: String
+    Description: Namespace Name
+    Default: namepassedherewithout
+Resources:
+  ChildStack:
+    Type: AWS::CloudFormation::Stack
+    Properties:
+      Parameters:
+        NamespaceC:
+          Ref: Namespace
+        ServiceNameC:
+          Ref: ServiceName
+      TemplateURL: https://s3.us-east-1.amazonaws.com/hello1stack23/f2e88901048e05dee16e3cf169bccf60.template
+Outputs:
+  Name:
+    Value: !Ref Namespace
\ No newline at end of file
diff --git a/param.json b/param.json
new file mode 100644
index 0000000..dcb7d36
--- /dev/null
+++ b/param.json
@@ -0,0 +1,6 @@
+{
+  "Parameters" : {
+    "NameStack" : "test"
+    
+  }
+}
diff --git a/scripts/install_dependencies b/scripts/install_dependencies
new file mode 100644
index 0000000..3d37299
--- /dev/null
+++ b/scripts/install_dependencies
@@ -0,0 +1,3 @@
+#!/bin/bash
+yum install -y httpd
+
diff --git a/scripts/start_server b/scripts/start_server
new file mode 100644
index 0000000..203194f
--- /dev/null
+++ b/scripts/start_server
@@ -0,0 +1,3 @@
+#!/bin/bash
+service httpd start
+
diff --git a/scripts/stop_server b/scripts/stop_server
new file mode 100644
index 0000000..00c3e3c
--- /dev/null
+++ b/scripts/stop_server
@@ -0,0 +1,6 @@
+#!/bin/bash
+isExistApp = `pgrep httpd`
+if [[ -n  $isExistApp ]]; then
+    service httpd stop        
+fi
+
diff --git a/stack2.yaml b/stack2.yaml
new file mode 100644
index 0000000..1272d14
--- /dev/null
+++ b/stack2.yaml
@@ -0,0 +1,16 @@
+AWSTemplateFormatVersion: 2010-09-09
+Parameters:
+  NameStack:
+    Type: String
+    Description: Service name for service account
+    Default: test
+ 
+Resources:
+  WaitCondition:
+    Type: AWS::CloudFormation::WaitConditionHandle
+Outputs:
+  Name:
+    Value:
+      Ref: NameStack
+
+
diff --git a/testfile.txt b/testfile.txt
new file mode 100644
index 0000000..ffcbc65
--- /dev/null
+++ b/testfile.txt
@@ -0,0 +1 @@
+hahhewhahdwa[idwa
