AWSTemplateFormatVersion: '2010-09-09'
Transform:
  - AWS::SecretsManager-2020-07-23
  - AWS::Serverless-2016-10-31
Description: VWS VPC Ingress Module Validation

Parameters:

  ParamBaseName:
    Type: String
    Default: 'release42'

  ParamStageName:
    Type: String

  ParamMigrationActive:
    Default: 'true'
    Type: String

  ParamEnableSlackbotSecret:
    Default: 'true'
    Type: String

  ParamContainerCpu:
    Default: '1024'
    Type: String

  ParamBastionContainerCpu:
    Default: '256'
    Type: String

  ParamContainerMemory:
    Default: '2048'
    Type: String

  ParamBastionContainerMemory:
    Default: '512'
    Type: String

  ParamJvmContainerXmx:
    Default: '1792'
    Type: String

  ParamTaskMinContainerCount:
    Default: '2'
    Type: String

  ParamFrontendContainerPort:
    Default: '80'
    Type: String

  ParamBackendContainerPort:
    Default: '8080'
    Type: String

  ParamFargatePlatformVersion:
    Default: '1.4.0'
    Type: String

  ParamContainerFamily:
    Default: release42
    Type: String

  ParamXrayTag:
    Default: 'latest'
    Type: String

  ParamBastionHostTag:
    Default: 'latest'
    Type: String

  ParamFrontendRepository:
    Type: String

  ParamBackendRepository:
    Type: String

  ParamXrayRepository:
    Type: String

  ParamBastionHostRepository:
    Type: String

  ParamCidrRange:
    Default: '192.168.0.0/20'
    Description: 'VPC CIDR range'
    Type: String
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'

  ParamDomainname:
    Type: String

  ParamCertificateArn:
    Type: String

  ParamHostedZoneId:
    Type: String

  ParamDeletionProtection:
    Type: String
    Default: 'True'

  DBName:
    Default: 'release42'
    Description: 'My database-name'
    Type: String

  DBUserName:
    Default: 'release42'
    Description: 'My application-username'
    Type: String

  DBInstanceClass:
    Default: 'db.t3.medium'
    AllowedValues:
      - db.t3.medium
    Description: 'DB instance class'
    Type: String
    ConstraintDescription: 'Enter on of db.t3.medium.'

  SlackChannel:
    Type: String
    Default: '#release-42-notifications'

  SlackUser:
    Type: String
    Default: 'r42-Notifications'

  ParamSlackFeedbackChannelId:
    Type: String

  ParamSlackFeedbackServiceEndpoint:
    Type: String

  ParamSlackFeedbackServiceRegion:
    Type: String

  ParamDisableStart:
    Type: String
    Default: 'false'

  ParamStackRoleArn:
    Type: String

  ParamS3BucketName:
    Default: 'Bucket'
    Type: String

  ParamS3BucketKey:
    Default: 'release42-migration/release42-lambda.zip'
    Type: String

  ParamStageKey:
    Type: String
    Description: 'key for the stage'

  ParamSnapshotIdentifier:
    Type: String
    Default: ''
    Description: 'Identifier of possible Snapshot'

  ParamCommitId:
    Type: String
    Default: ''
    Description: 'Git commit ID'

Conditions:
  IsE2ETest: !Equals
    - !Ref ParamStageName
    - e2e
  IsLoadTest: !Equals
    - !Ref ParamStageName
    - load
  IsE2E: !Or [ Condition: IsE2ETest, Condition: IsLoadTest ]
  IsNotE2E:
    !Not [ Condition: IsE2E ]
  IsMigrationActive: !Equals
    - !Ref ParamMigrationActive
    - true
  IsSlackbotSecretEnabled: !Equals
    - !Ref ParamEnableSlackbotSecret
    - true
  NotUseIdentifier: !Equals
    - !Ref ParamSnapshotIdentifier
    - ''

Resources:
  # region: aurora database

  RDSSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      KmsKeyId: !Ref ParamStageKey
      Description: !Sub "This is a Secrets Manager secret for the ${ParamStageName}-RDS DB instance"
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet Group for release42 database"
      SubnetIds: !GetAtt NetworkServiceSubnets.Values

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub '${ParamBaseName}-${ParamStageName}-database'
      Tags:
        - Key: Name
          Value: !Sub '${ParamBaseName}-${ParamStageName}-database'
      VpcId: !Ref NetworkVpc

  DatabaseSecurityRuleIn:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      SourceSecurityGroupId: !GetAtt ContainerSecurityGroup.GroupId
      FromPort: 3306
      GroupId: !Ref DatabaseSecurityGroup
      IpProtocol: TCP
      ToPort: 3306

  DatabaseCPG:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: CPG for release42 database cluster
      Family: aurora-mysql8.0
      Parameters:
        collation_connection: utf8_unicode_ci
        collation_server: utf8_unicode_ci
        character_set_server: utf8
        character_set_filesystem: utf8
        character_set_client: utf8
        character_set_connection: utf8
        character_set_database: utf8
        character_set_results: utf8

  DatabaseCluster:
    Type: AWS::RDS::DBCluster
    DependsOn:
      - RDSSecret
      - DatabaseSubnetGroup
    Properties:
      AvailabilityZones:
        - eu-west-1a
        - eu-west-1b
        - eu-west-1c
      BackupRetentionPeriod: 14
      MasterUsername:
        Fn::If:
          - NotUseIdentifier
          - !Join [ '', [ '{{resolve:secretsmanager:', !Ref RDSSecret, ':SecretString:username}}' ] ]
          - Ref: AWS::NoValue
      MasterUserPassword:
        Fn::If:
          - NotUseIdentifier
          - !Join [ '', [ '{{resolve:secretsmanager:', !Ref RDSSecret, ':SecretString:password}}' ] ]
          - Ref: AWS::NoValue
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      EnableCloudwatchLogsExports:
        - general
      DBClusterParameterGroupName: !Ref DatabaseCPG
      DatabaseName: 'release42'
      EnableHttpEndpoint: true
      EnableIAMDatabaseAuthentication: true
      Engine: aurora-mysql
      EngineVersion: 8.0.mysql_aurora.3.01.0
      EngineMode: provisioned
      DeletionProtection: !Ref ParamDeletionProtection
      StorageEncrypted: true
      SnapshotIdentifier:
        Fn::If:
          - NotUseIdentifier
          - Ref: AWS::NoValue
          - Ref: ParamSnapshotIdentifier
      KmsKeyId: !Ref ParamStageKey
      VpcSecurityGroupIds:
        - !GetAtt DatabaseSecurityGroup.GroupId

  SecretRDSInstanceAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    DependsOn:
      - DatabaseCluster
      - RDSSecret
    Properties:
      SecretId: !Ref RDSSecret
      TargetId: !Ref DatabaseCluster
      TargetType: AWS::RDS::DBCluster

  DatabaseCredentialsRotation:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: IsNotE2E
    DependsOn: SecretRDSInstanceAttachment
    Properties:
      SecretId: !Ref RDSSecret
      RotateImmediatelyOnUpdate: false
      HostedRotationLambda:
        RotationType: MySQLSingleUser
        RotationLambdaName: !Sub 'RDSSecretsManagerRotation-${ParamStageName}'
        VpcSecurityGroupIds: !GetAtt ContainerSecurityGroup.GroupId
        VpcSubnetIds: !Join [ ',', [ !Ref NetworkAppSubnet1, !Ref NetworkAppSubnet2, !Ref NetworkAppSubnet3 ] ]
      RotationRules:
        AutomaticallyAfterDays: 90

  RDSDBInstance1:
    Type: "AWS::RDS::DBInstance"
    Properties:
      AvailabilityZone: eu-west-1a
      DBClusterIdentifier:
        Ref: DatabaseCluster
      DBInstanceClass: !Ref DBInstanceClass
      Engine: aurora-mysql
      PubliclyAccessible: "false"

  RDSDBInstance2:
    Type: "AWS::RDS::DBInstance"
    Properties:
      AvailabilityZone: eu-west-1b
      DBClusterIdentifier:
        Ref: DatabaseCluster
      DBInstanceClass: !Ref DBInstanceClass
      Engine: aurora-mysql
      PubliclyAccessible: "false"

  # endregion

  Network:
    Type: VWS::VPC::Standard::MODULE

  Ingress:
    Type: VWS::VPC::Ingress::MODULE
    Properties:
      VpcId: !Ref NetworkVpc
      Subnets: !GetAtt [ NetworkPublicSubnets, Values ]
      IncludeLogin: "true"
      DomainName: !Sub ${ParamDomainname}
      CertificateArn: !Sub ${ParamCertificateArn}
      LogRetention: 30
      TargetGroup: !Ref FrontendTargetGroup

  HttpsProxy:
    Type: VWS::Proxy::Instance
    Properties:
      AllowedSuffixes:
        - !Sub 'public-keys.auth.elb.${AWS::Region}.amazonaws.com'
        - slack.com
        - slack-feedback-service.vwapps.run
      AllowedPorts:
        - 443

  HttpsProxyCredentials:
    Type: VWS::Proxy::Credentials
    Properties:
      Instance: !Ref HttpsProxy
      Principals:
        - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:root'

  # region: cognito
  Userpool:
    Type: AWS::Cognito::UserPool
    Condition: IsE2E
    Properties:
      Schema:
        - Name: preferred_username
          Required: true
          Mutable: true
        - Name: email
          Required: true
          Mutable: true
        - Name: name
          Required: true
          Mutable: true
        - Name: department_number
          AttributeDataType: String
          Required: false
          Mutable: true
        - Name: vwg_community
          AttributeDataType: String
          Required: false
          Mutable: true
        - Name: company_code
          AttributeDataType: String
          Required: false
          Mutable: true
        - Name: employee_type
          AttributeDataType: String
          Required: false
          Mutable: true
        - Name: cost_center
          AttributeDataType: String
          Required: false
          Mutable: true
        - Name: corporation
          AttributeDataType: String
          Required: false
          Mutable: true
        - Name: plant_number
          AttributeDataType: String
          Required: false
          Mutable: true
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: True
      UsernameConfiguration:
        CaseSensitive: True
      UserPoolName:  !If [IsE2ETest, 'E2E-Userpool', 'Load-Userpool']

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Condition: IsE2E
    Properties:
      AllowedOAuthFlows: [ 'code' ]
      AllowedOAuthFlowsUserPoolClient: True
      AllowedOAuthScopes: [ 'openid' ]
      ExplicitAuthFlows:
        - 'ALLOW_ADMIN_USER_PASSWORD_AUTH'
        - 'ALLOW_USER_PASSWORD_AUTH'
        - 'ALLOW_REFRESH_TOKEN_AUTH'
      CallbackURLs: !If [IsE2ETest, [ 'https://e2e.release42-test.vwapps.run/oauth2/idpresponse' ], [ 'https://load.release42-test.vwapps.run/oauth2/idpresponse' ]]
      ClientName: 'E2E-Client'
      GenerateSecret: True
      UserPoolId: !Ref Userpool
      SupportedIdentityProviders: [ 'COGNITO' ]

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Condition: IsE2E
    Properties:
      Domain: !Sub 'release42-${ParamStageName}'
      UserPoolId: !Ref Userpool

  UserPoolUserTestUser:
    Type: AWS::Cognito::UserPoolUser
    Condition: IsE2E
    Properties:
      Username: 'TestUser'
      UserAttributes:
        - Name: preferred_username
          Value: 'TestUser'
        - Name: email
          Value: 'release42.support.vwag.r.wob@volkswagen.de'
        - Name: name
          Value: 'Björn Biermann'
        - Name: custom:department_number
          Value: 'K-DIX-Q'
        - Name: custom:vwg_community
          Value: 'internal'
        - Name: custom:company_code
          Value: '0103'
        - Name: custom:employee_type
          Value: 'P'
        - Name: custom:cost_center
          Value: '8120'
        - Name: custom:corporation
          Value: 'Volkswagen AG'
        - Name: custom:plant_number
          Value: '11'
      UserPoolId: !Ref Userpool

  UserPoolUserVwStell:
    Type: AWS::Cognito::UserPoolUser
    Condition: IsE2E
    Properties:
      Username: 'vwstell'
      UserAttributes:
        - Name: preferred_username
          Value: 'vwstell'
        - Name: email
          Value: 'release42.support.vwag.r.wob@volkswagen.de'
        - Name: name
          Value: 'Stefanie Schröder'
        - Name: custom:department_number
          Value: 'K-DIX-Q'
        - Name: custom:vwg_community
          Value: 'internal'
        - Name: custom:company_code
          Value: '0103'
        - Name: custom:employee_type
          Value: 'P'
        - Name: custom:cost_center
          Value: '8120'
        - Name: custom:corporation
          Value: 'Volkswagen AG'
        - Name: custom:plant_number
          Value: '11'
      UserPoolId: !Ref Userpool

  UserPoolUserVwApprv:
    Type: AWS::Cognito::UserPoolUser
    Condition: IsE2E
    Properties:
      Username: 'vwapprv'
      UserAttributes:
        - Name: preferred_username
          Value: 'vwapprv'
        - Name: email
          Value: 'release42.support.vwag.r.wob@volkswagen.de'
        - Name: name
          Value: 'Guido Giesecke'
        - Name: custom:department_number
          Value: 'K-DIX-Q'
        - Name: custom:vwg_community
          Value: 'internal'
        - Name: custom:company_code
          Value: '0103'
        - Name: custom:employee_type
          Value: 'P'
        - Name: custom:cost_center
          Value: '8120'
        - Name: custom:corporation
          Value: 'Volkswagen AG'
        - Name: custom:plant_number
          Value: '11'
      UserPoolId: !Ref Userpool
  # endregion

  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: 'HTTP'
      TargetType: ip
      VpcId: !Ref NetworkVpc
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: true
        - Key: stickiness.type
          Value: lb_cookie
        - Key: 'deregistration_delay.timeout_seconds'
          Value: 10

  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - IngressHttpsListener
      - IngressLoadBalancer
      - NetworkVpc
    Properties:
      HealthCheckPath: /api/health
      HealthCheckPort: !Ref ParamBackendContainerPort
      Port: !Ref ParamBackendContainerPort
      Protocol: 'HTTP'
      TargetType: ip
      VpcId: !Ref NetworkVpc
      TargetGroupAttributes:
        - Key: 'deregistration_delay.timeout_seconds'
          Value: 10
        - Key: stickiness.enabled
          Value: true
        - Key: stickiness.type
          Value: lb_cookie

  BackendListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Condition: IsNotE2E
    DependsOn:
      - IngressHttpsListener
    Properties:
      Actions:
        - Type: authenticate-oidc
          Order: 1
          AuthenticateOidcConfig:
            AuthorizationEndpoint: !GetAtt IngressLogin.AuthorizationEndpoint
            ClientId: !Sub
              - '{{resolve:secretsmanager:${SecretArn}:SecretString:client_id:AWSCURRENT:}}'
              - SecretArn: !GetAtt [ IngressLogin, SecretArn ]
            ClientSecret: !Sub
              - '{{resolve:secretsmanager:${SecretArn}:SecretString:client_secret:AWSCURRENT:}}'
              - SecretArn: !GetAtt [ IngressLogin, SecretArn ]
            Issuer: !GetAtt IngressLogin.Issuer
            OnUnauthenticatedRequest: deny
            Scope: openid profile email
            SessionCookieName: x-session
            SessionTimeout: 28800
            TokenEndpoint: !GetAtt IngressLogin.TokenEndpoint
            UserInfoEndpoint: !GetAtt IngressLogin.UserInfoEndpoint
        - Order: 2
          Type: forward
          TargetGroupArn: !Ref BackendTargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /api/*
              - /api
      ListenerArn: !Ref IngressHttpsListenerLogin
      Priority: 2

  BackendListenerRuleE2E:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: IsE2E
    Properties:
      Actions:
        - Order: 1
          Type: authenticate-cognito
          AuthenticateCognitoConfig:
            OnUnauthenticatedRequest: deny
            UserPoolArn: !GetAtt Userpool.Arn
            UserPoolClientId: !Ref UserPoolClient
            UserPoolDomain: !Ref UserPoolDomain
        - Order: 2
          Type: forward
          TargetGroupArn: !Ref BackendTargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /api/*
              - /api
      ListenerArn: !Ref IngressHttpsListenerLogin
      Priority: 2

  FrontendListenerRuleE2E:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: IsE2E
    Properties:
      Actions:
        - Order: 1
          Type: authenticate-cognito
          AuthenticateCognitoConfig:
            OnUnauthenticatedRequest: authenticate
            UserPoolArn: !GetAtt Userpool.Arn
            UserPoolClientId: !Ref UserPoolClient
            UserPoolDomain: !Ref UserPoolDomain
        - Order: 2
          Type: forward
          TargetGroupArn: !Ref FrontendTargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - '*'
      ListenerArn: !Ref IngressHttpsListenerLogin
      Priority: 3

  LoadBalancerAlias:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Sub ${ParamHostedZoneId}
      Name: !Sub ${ParamDomainname}
      Type: A
      AliasTarget:
        DNSName: !GetAtt [IngressLoadBalancer, DNSName]
        HostedZoneId: !GetAtt [IngressLoadBalancer, CanonicalHostedZoneID]

  # region: fargate

  TaskExecutionRole:
    Properties:
      RoleName: !Sub 'TaskExecutionRole-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource:
                  - !GetAtt HttpsProxyCredentials.SecretArn
              - Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource:
                  - "*"
          PolicyName: !Sub 'AccessProxyCredentials-${AWS::StackName}'
      Path: /
    Type: AWS::IAM::Role

  TaskRole:
    Properties:
      RoleName: !Sub 'TaskRole-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AWSXrayWriteOnlyAccess'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - cloudwatch:GetMetricData
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:ListMetrics
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:PutMetricData
                  - logs:DeleteMetricFilter
                  - logs:DescribeMetricFilters
                  - logs:PutMetricFilter
                  - logs:TestMetricFilter
                Effect: Allow
                Resource:
                  - "*"
              - Action:
                  - execute-api:Invoke
                Effect: Allow
                Resource:
                  !If
                    - IsE2E
                    - 'arn:aws:execute-api:eu-west-1:806244116382:i130pf13mj/production/POST/create-feedback/C02PQ02SW6B' # release-42-feedback-e2e
                    - 'arn:aws:execute-api:eu-west-1:806244116382:i130pf13mj/production/POST/create-feedback/C02GJM7AU5V' # release-42-feedback
          PolicyName: !Sub 'CloudWatchLog-Metric-${AWS::StackName}'
        - PolicyDocument:
            Statement:
              - Action:
                  - ecs:*
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                Effect: Allow
                Resource:
                  - "*"
          PolicyName: !Sub 'ssm-messages-${AWS::StackName}'
        - PolicyDocument:
            Statement:
              - Action:
                  -  "rds-db:connect"
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:*/${DBName}"
          PolicyName: !Sub 'rds-access-${AWS::StackName}'
      Path: /
    Type: AWS::IAM::Role

  Cluster:
    Properties:
      ClusterName: !Sub '${ParamBaseName}-${ParamStageName}'
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
    Type: AWS::ECS::Cluster

  ContainerSecurityGroup:
    Properties:
      GroupDescription: !Sub '${ParamBaseName}-${ParamStageName}-http-proxy'
      Tags:
        - Key: Name
          Value: !Sub '${ParamBaseName}-${ParamStageName}-http-proxy'
      VpcId: !Ref NetworkVpc
    Type: AWS::EC2::SecurityGroup

  ContainerSecurityRuleIn:
    Properties:
      CidrIp: !Ref ParamCidrRange
      FromPort: !Ref ParamFrontendContainerPort
      GroupId: !Ref ContainerSecurityGroup
      IpProtocol: TCP
      ToPort: !Ref ParamFrontendContainerPort
    Type: AWS::EC2::SecurityGroupIngress

  ContainerSecurityRuleInBackend:
    Properties:
      CidrIp: !Ref ParamCidrRange
      FromPort: !Ref ParamBackendContainerPort
      GroupId: !Ref ContainerSecurityGroup
      IpProtocol: TCP
      ToPort: !Ref ParamBackendContainerPort
    Type: AWS::EC2::SecurityGroupIngress

  BackendE2EListenerWaitCondition:
    Type: AWS::CloudFormation::WaitConditionHandle
    Metadata:
      IsReady: !If [ IsE2E, !Ref BackendListenerRuleE2E, "" ]

  BackendListenerWaitCondition:
    Type: AWS::CloudFormation::WaitConditionHandle
    Metadata:
      IsReady: !If [ IsNotE2E, !Ref BackendListenerRule, "" ]

  FargateService:
    DependsOn:
      - IngressHttpsListener
      - VpcEndpointEcrApi
      - VpcEndpointCloudwatchLogs
      - VpcEndpointEcrDkr
      - BackendE2EListenerWaitCondition
      - BackendListenerWaitCondition
      - CreateDBUser
    Properties:
      Cluster: !Ref Cluster
      DesiredCount: !Ref ParamTaskMinContainerCount
      LaunchType: FARGATE
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      HealthCheckGracePeriodSeconds: 50
      LoadBalancers:
        - ContainerName: Release42-frontend
          ContainerPort: !Ref ParamFrontendContainerPort
          TargetGroupArn: !Ref FrontendTargetGroup
        - ContainerName: Release42-backend
          ContainerPort: !Ref ParamBackendContainerPort
          TargetGroupArn: !Ref BackendTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ContainerSecurityGroup
          Subnets: !GetAtt [ NetworkAppSubnets, Values ]
      PlatformVersion: !Ref ParamFargatePlatformVersion
      TaskDefinition: !Ref FargateTaskDefinition
      EnableExecuteCommand: true
    Type: AWS::ECS::Service

  FargateBastionService:
    DependsOn:
      - IngressHttpsListener
      - VpcEndpointEcrApi
      - VpcEndpointCloudwatchLogs
      - VpcEndpointEcrDkr
    Properties:
      Cluster: !Ref Cluster
      DesiredCount: 1
      LaunchType: FARGATE
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ContainerSecurityGroup
          Subnets: !GetAtt [ NetworkAppSubnets, Values ]
      PlatformVersion: !Ref ParamFargatePlatformVersion
      TaskDefinition: !Ref FargateBastionTaskDefinition
      EnableExecuteCommand: true
    Type: AWS::ECS::Service

  AppServiceScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 4
      MinCapacity: 2
      ResourceId: !Sub 'service/${Cluster}/${FargateService.Name}'
      RoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      ScheduledActions:
        - Schedule: 'cron(0 20 * * ? *)'
          ScheduledActionName: scaleInOnNight
          ScalableTargetAction:
            MinCapacity: 1
          Timezone: Europe/Berlin
        - Schedule: 'cron(0 7 * * ? *)'
          ScheduledActionName: scaleOutOnMorning
          ScalableTargetAction:
            MinCapacity: 2
          Timezone: Europe/Berlin

  AppServiceScale:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ScaleRelease42
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AppServiceScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 75

  FargateXrayLogGroup:
    Properties:
      LogGroupName: !Sub 'volkswagen/release42/${ParamStageName}/xray'
      RetentionInDays: 30
    Type: AWS::Logs::LogGroup

  FargateBastionHostLogGroup:
    Properties:
      LogGroupName: !Sub 'volkswagen/release42/${ParamStageName}/bastion-host'
      RetentionInDays: 30
    Type: AWS::Logs::LogGroup

  FargateFrontendLogGroup:
    Properties:
      LogGroupName: !Sub 'volkswagen/release42/${ParamStageName}/frontend'
      RetentionInDays: 30
    Type: AWS::Logs::LogGroup

  FargateBackendLogGroup:
    Properties:
      LogGroupName: !Sub 'volkswagen/release42/${ParamStageName}/backend'
      RetentionInDays: 30
    Type: AWS::Logs::LogGroup

  FargateTaskDefinition:
    DependsOn:
     - FrontendTargetGroup
    Properties:
      ContainerDefinitions:
        - Environment: #frontend
            - Name: StageName
              Value: !Ref ParamStageName
            - Name: PORT
              Value: !Ref ParamFrontendContainerPort
            - Name: AWS_XRAY_DAEMON_ADDRESS
              Value: "xray-daemon:2000"
          Essential: true
          Image: !Sub '${ParamFrontendRepository}:c.${ParamCommitId}'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref FargateFrontendLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: fargate
          Name: Release42-frontend
          PortMappings:
            - ContainerPort: !Ref ParamFrontendContainerPort
          Ulimits:
            - Name: nofile
              HardLimit: 65536
              SoftLimit: 65536
        - Environment: #backend
            - Name: StageName
              Value: !Ref ParamStageName
            - Name: PORT
              Value: !Ref ParamBackendContainerPort
            - Name: spring.datasource.url
              Value: !Sub 'jdbc:mysql:aws://${DatabaseCluster.Endpoint.Address}:${DatabaseCluster.Endpoint.Port}/${DBName}?useAwsIam=true&useSSL=true&requireSSL=true&verifyServerCertificate=true&user=${DBUserName}'
            - Name: keyserver
              Value: !Sub 'https://public-keys.auth.elb.${AWS::Region}.amazonaws.com'
            - Name: PROXY_CREDENTIALS_ENDPOINT
              Value: !Sub "${HttpsProxy.DnsName}:8080"
            - Name: PROXY_CREDENTIALS_HOST
              Value: !Sub "${HttpsProxy.DnsName}"
            - Name: PROXY_CREDENTIALS_PORT
              Value: "8080"
            - Name: JAVA_OPTS    # the jvm may use up to 135% of the heap
              Value: !Sub "-Xmx${ParamJvmContainerXmx}m -Xms256m"
            - Name: SLACK_FEEDBACK_CHANNEL_ID
              Value: !Ref ParamSlackFeedbackChannelId
            - Name: SLACK_FEEDBACK_ENDPOINT
              Value: !Ref ParamSlackFeedbackServiceEndpoint
            - Name: SLACK_FEEDBACK_REGION
              Value: !Ref ParamSlackFeedbackServiceRegion
            - Name: DISABLE_START
              Value: !Ref ParamDisableStart
          Secrets:
            - Name: PROXY_CREDENTIALS_PASSWORD
              ValueFrom: !Sub "${HttpsProxyCredentials.SecretArn}:password::"
            - Name: PROXY_CREDENTIALS_USER
              ValueFrom: !Sub "${HttpsProxyCredentials.SecretArn}:username::"
          Essential: true
          Image: !Sub '${ParamBackendRepository}:c.${ParamCommitId}'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref FargateBackendLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: fargate
          Name: Release42-backend
          PortMappings:
            - ContainerPort: !Ref ParamBackendContainerPort
          Ulimits:
            - Name: nofile
              HardLimit: 65536
              SoftLimit: 65536
        - Environment: [ ] #xray
          Essential: true
          Image: !Sub '${ParamXrayRepository}:${ParamXrayTag}'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref FargateXrayLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: fargate
          Name: VwsXRaySidecar
          PortMappings:
            - ContainerPort: 2000
              Protocol: UDP
      Cpu: !Ref ParamContainerCpu
      ExecutionRoleArn: !GetAtt [ TaskExecutionRole, Arn ]
      Family: !Sub '${ParamContainerFamily}-${ParamStageName}'
      Memory: !Ref ParamContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt [ TaskRole, Arn ]
    Type: AWS::ECS::TaskDefinition

  FargateBastionTaskDefinition:
    DependsOn:
     - FrontendTargetGroup
    Properties:
      ContainerDefinitions:
        - Environment: [ ] #bastion-host
          Essential: true
          Image: !Sub '${ParamBastionHostRepository}:${ParamBastionHostTag}'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref FargateBastionHostLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: fargate
          Name: VwsBastionHost
      Cpu: !Ref ParamBastionContainerCpu
      ExecutionRoleArn: !GetAtt [ TaskExecutionRole, Arn ]
      Family: !Sub '${ParamContainerFamily}-${ParamStageName}-BastionHost'
      Memory: !Ref ParamBastionContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt [ TaskRole, Arn ]
    Type: AWS::ECS::TaskDefinition

  VpcEndpointEcrDkr:
    Properties:
      PrivateDnsEnabled: true
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.dkr'
      VpcEndpointType: Interface
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      SubnetIds: !GetAtt [NetworkServiceSubnets, Values]
      VpcId: !Ref NetworkVpc
    Type: AWS::EC2::VPCEndpoint

  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref NetworkRouteTablePrivate
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway
      VpcId: !Ref NetworkVpc

  XrayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.xray'
      SubnetIds: !GetAtt [ NetworkServiceSubnets, Values ]
      VpcEndpointType: Interface
      VpcId: !Ref NetworkVpc

  MonitoringEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.monitoring'
      SubnetIds: !GetAtt [ NetworkServiceSubnets, Values ]
      VpcEndpointType: Interface
      VpcId: !Ref NetworkVpc

  VpcEndpointEcrApi:
    Properties:
      PrivateDnsEnabled: true
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.api'
      VpcEndpointType: Interface
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      SubnetIds: !GetAtt [NetworkServiceSubnets, Values]
      VpcId: !Ref NetworkVpc
    Type: AWS::EC2::VPCEndpoint

  VpcEndpointCloudwatchLogs:
    Properties:
      PrivateDnsEnabled: true
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.logs'
      VpcEndpointType: Interface
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      SubnetIds: !GetAtt [ NetworkServiceSubnets, Values ]
      VpcId: !Ref NetworkVpc
    Type: AWS::EC2::VPCEndpoint

  VpcEndpointSecretsmanager:
    Properties:
      PrivateDnsEnabled: true
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.secretsmanager'
      VpcEndpointType: Interface
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      SubnetIds: !GetAtt [ NetworkServiceSubnets, Values ]
      VpcId: !Ref NetworkVpc
    Type: AWS::EC2::VPCEndpoint

  SSNNessagesEndpoint:
    Properties:
      PrivateDnsEnabled: true
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssmmessages'
      VpcEndpointType: Interface
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      SubnetIds: !GetAtt [ NetworkServiceSubnets, Values ]
      VpcId: !Ref NetworkVpc
    Type: AWS::EC2::VPCEndpoint

  RDSEndpoint:
    Properties:
      PrivateDnsEnabled: true
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.rds'
      VpcEndpointType: Interface
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      SubnetIds: !GetAtt [ NetworkServiceSubnets, Values ]
      VpcId: !Ref NetworkVpc
    Type: AWS::EC2::VPCEndpoint

  VpcEndpointHttpsProxy:
    Properties:
      PrivateDnsEnabled: true
      ServiceName: !GetAtt [HttpsProxy, ServiceName]
      VpcEndpointType: Interface
      SecurityGroupIds:
        - !Ref HttpsProxySecurityGroup
      SubnetIds: !GetAtt [ NetworkServiceSubnets, Values ]
      VpcId: !Ref NetworkVpc
    Type: AWS::EC2::VPCEndpoint

  HttpsProxySecurityGroup:
    Properties:
      GroupDescription: !Sub '${AWS::StackName}-proxy'
      VpcId: !Ref NetworkVpc
    Type: AWS::EC2::SecurityGroup

  HttpProxySecurityRuleIn:
    Properties:
      CidrIp: !Ref ParamCidrRange
      FromPort: 8080
      GroupId: !Ref HttpsProxySecurityGroup
      IpProtocol: TCP
      ToPort: 8080
    Type: AWS::EC2::SecurityGroupIngress

  EndpointSecurityGroup:
    Properties:
      GroupDescription: !Sub '${AWS::StackName}-endpoint-security'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-endpoint-security'
      VpcId: !Ref NetworkVpc
    Type: AWS::EC2::SecurityGroup

  EndpointHttpsRule:
    Properties:
      CidrIp: !Ref ParamCidrRange
      FromPort: 443
      GroupId: !Ref EndpointSecurityGroup
      IpProtocol: TCP
      ToPort: 443
    Type: AWS::EC2::SecurityGroupIngress
  # endregion


  # region: create user
  CreateDBUserFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - DatabaseCluster
      - RDSDBInstance1
      - RDSDBInstance2
    Properties:
      CodeUri:
        Bucket: !Sub ${ParamS3BucketName}
        Key: !Sub ${ParamS3BucketKey}
      Handler: com.volkswagen.release42.CreateDBUserExecutor::handleRequest
      Description: Create a new DB User
      MemorySize: 512
      PackageType: Zip
      # Function's execution role
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LambdaExecutionRole'
      ReservedConcurrentExecutions: 1
      Runtime: java11
      Timeout: 60
      Tracing: Active
      VpcConfig:
        SecurityGroupIds:
          - !Ref ContainerSecurityGroup
        SubnetIds: !GetAtt [ NetworkAppSubnets, Values ]

  CreateDBUser:
    DependsOn:
      - NetworkServiceNaclAssociation1
      - NetworkServiceNaclAssociation2
      - NetworkServiceNaclAssociation3
      - NetworkServiceAllowAppIngress1
      - NetworkServiceAllowAppIngress2
      - NetworkServiceAllowAppIngress3
      - NetworkPrivateRouteTableAssociationApp1
      - NetworkPrivateRouteTableAssociationApp2
      - NetworkPrivateRouteTableAssociationApp3
      - NetworkPrivateRouteTableAssociationService1
      - NetworkPrivateRouteTableAssociationService2
      - NetworkPrivateRouteTableAssociationService3
      - S3Endpoint
    Type: Custom::CreateDBUser
    Properties:
      ServiceToken: !GetAtt CreateDBUserFunction.Arn
      SecretId: !Sub "${RDSSecret}"
      Username: !Sub "${DBUserName}"
      Database: !Sub "${DBName}"
      DataSourceUrl: !Sub 'jdbc:mysql:aws://${DatabaseCluster.Endpoint.Address}:${DatabaseCluster.Endpoint.Port}/${DBName}?useSSL=true'
      Version: 3

  # endregion

  # region: migration
  DeleteOldSnapshots:
    Condition: IsMigrationActive
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: python3.9
      InlineCode: |
        import json
        import boto3
        import os
        def lambda_handler(event, context):
          clusterId = os.environ['cluster_id']
          client = boto3.client('rds')
          response = client.response = client.describe_db_cluster_snapshots(
            DBClusterIdentifier=clusterId,
            SnapshotType='manual')
          keep_snapshot_count = 14
          snapshots = sorted(response['DBClusterSnapshots'], key=lambda d: d['SnapshotCreateTime'], reverse=True)
          for snapshot in snapshots[keep_snapshot_count:]:
            print('Delete Snapshot:', snapshot['DBClusterSnapshotIdentifier'])
            client.delete_db_cluster_snapshot(DBClusterSnapshotIdentifier=snapshot['DBClusterSnapshotIdentifier'])
          return {
            'statusCode': 200,
            'body': json.dumps('Snapshot deleted')
          }
      Timeout: 30
      Environment:
        Variables:
          cluster_id: !Ref DatabaseCluster
      # Function's execution role
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LambdaExecutionRole'
      Tracing: Active
      VpcConfig:
        SecurityGroupIds:
          - !Ref ContainerSecurityGroup
        SubnetIds: !GetAtt [ NetworkAppSubnets, Values ]

  Migration:
    Condition: IsMigrationActive
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Sub ${ParamS3BucketName}
        Key: !Sub ${ParamS3BucketKey}
      Handler: com.volkswagen.release42.MigrationExecutor::handleRequest
      Description: Migrates database
      Environment:
        Variables:
          secret_id: !Sub "${RDSSecret}"
          datasource_url: !Sub 'jdbc:mysql:aws://${DatabaseCluster.Endpoint.Address}:${DatabaseCluster.Endpoint.Port}/${DBName}?useSSL=true'
      MemorySize: 512
      PackageType: Zip
      # Function's execution role
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LambdaExecutionRole'
      ReservedConcurrentExecutions: 1
      Runtime: java11
      Timeout: 60
      Tracing: Active
      VpcConfig:
        SecurityGroupIds:
          - !Ref ContainerSecurityGroup
        SubnetIds: !GetAtt [ NetworkAppSubnets, Values ]

  MigrationStateMachine:
    Condition: IsMigrationActive
    Type: AWS::Serverless::StateMachine
    DependsOn:
      - Migration
    Properties:
      Definition:
        Comment: Migration Statemachine
        StartAt: DeleteOldSnapshots
        States:
          DeleteOldSnapshots:
            Type: Task
            Next: CreateDBClusterSnapshot
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
              Payload.$: $
              FunctionName: ${DeleteOldSnapshots}
            Retry:
              - ErrorEquals:
                  - Lambda.ServiceException
                  - Lambda.AWSLambdaException
                  - Lambda.SdkClientException
                IntervalSeconds: 2
                MaxAttempts: 6
                BackoffRate: 2
          CreateDBClusterSnapshot:
            Type: Task
            Next: Migration
            Parameters:
              DbClusterIdentifier: !Ref DatabaseCluster
              DbClusterSnapshotIdentifier: !Sub '${ParamStageName}-migration-${ParamCommitId}'
            Resource: arn:aws:states:::aws-sdk:rds:createDBClusterSnapshot
          Migration:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            Parameters:
              Payload.$: $
              FunctionName: ${Migration}
            Retry:
              - ErrorEquals:
                  - Lambda.ServiceException
                  - Lambda.AWSLambdaException
                  - Lambda.SdkClientException
                IntervalSeconds: 2
                MaxAttempts: 6
                BackoffRate: 2
            End: true
      DefinitionSubstitutions:
        Migration: !Ref Migration
      Name: !Sub 'MigrationStateMachine-${ParamStageName}'
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LambdaExecutionRole'
      Tracing:
        Enabled: true
  # endregion

  # region: DashboardLambda
  GetUsers:
    Condition: IsNotE2E
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Sub ${ParamS3BucketName}
        Key: !Sub ${ParamS3BucketKey}
      Handler: com.volkswagen.release42.GetTotalUsers::handleRequest
      Description: Get users over time
      Environment:
        Variables:
          secret_id: !Sub "${RDSSecret}"
          datasource_url: !Sub 'jdbc:mysql:aws://${DatabaseCluster.Endpoint.Address}:${DatabaseCluster.Endpoint.Port}/${DBName}?useSSL=true'
      MemorySize: 512
      PackageType: Zip
      # Function's execution role
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LambdaExecutionRole'
      ReservedConcurrentExecutions: 1
      Runtime: java11
      Timeout: 60
      Tracing: Active
      VpcConfig:
        SecurityGroupIds:
          - !Ref ContainerSecurityGroup
        SubnetIds: !GetAtt [ NetworkAppSubnets, Values ]

  GetProjectsOverTime:
    Condition: IsNotE2E
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Sub ${ParamS3BucketName}
        Key: !Sub ${ParamS3BucketKey}
      Handler: com.volkswagen.release42.GetProjectsOverTime::handleRequest
      Description: Gets projects over time
      Environment:
        Variables:
          secret_id: !Sub "${RDSSecret}"
          datasource_url: !Sub 'jdbc:mysql:aws://${DatabaseCluster.Endpoint.Address}:${DatabaseCluster.Endpoint.Port}/${DBName}?useSSL=true'
      MemorySize: 512
      PackageType: Zip
      # Function's execution role
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LambdaExecutionRole'
      ReservedConcurrentExecutions: 1
      Runtime: java11
      Timeout: 60
      Tracing: Active
      VpcConfig:
        SecurityGroupIds:
          - !Ref ContainerSecurityGroup
        SubnetIds: !GetAtt [ NetworkAppSubnets, Values ]
  # endregion

  # region: alerting
  AWSSlackNotificationWebHook:
    Condition: IsSlackbotSecretEnabled
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: AWSSlackNotificationWebHook
      Description: 'For changes go to: https://api.slack.com/apps/A028QF869FH/general'
      SecretString: '{"webhook-url":""}'
      KmsKeyId: !Ref ParamStageKey

  SlackBot:
    Condition: IsNotE2E
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: 'arn:aws:serverlessrepo:eu-west-1:637378239786:applications/vws-aws-slack-bot'
        SemanticVersion: 0.0.18
      Parameters:
        VpcId: !Ref NetworkVpc
        SubnetId: !Select [ 0, !GetAtt [ NetworkAppSubnets, Values ]]
        WebhookUrl: !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:webhook-url}}'
          - SecretArn: !Ref AWSSlackNotificationWebHook
        ProxyUrl: !Sub
          - "http://${Username}:${Password}@${Host}"
          - Host: proxy.resources.vwapps.cloud:8080
            Username: !Sub
              - '{{resolve:secretsmanager:${SecretArn}:SecretString:username}}'
              - SecretArn: !GetAtt [ HttpsProxyCredentials, SecretArn ]
            Password: !Sub
              - '{{resolve:secretsmanager:${SecretArn}:SecretString:password}}'
              - SecretArn: !GetAtt [ HttpsProxyCredentials, SecretArn ]

  5XXErrorsAlarm:
    Condition: IsNotE2E
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Notify if there are 5XX errors"
      AlarmName: !Sub '${ParamStageName}-5XXErrorsAlarm'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt IngressLoadBalancer.LoadBalancerFullName
      EvaluationPeriods: 1
      MetricName: "HTTPCode_Target_5XX_Count"
      Namespace: AWS/ApplicationELB
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

  TargetResponseTimeAlarm:
    Condition: IsNotE2E
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Notify if there are greater target response times"
      AlarmName: !Sub '${ParamStageName}-TargetResponseTimeAlarm'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt IngressLoadBalancer.LoadBalancerFullName
      EvaluationPeriods: 1
      MetricName: "TargetResponseTime"
      Namespace: AWS/ApplicationELB
      Period: 60
      Statistic: Average
      Threshold: 1
      TreatMissingData: notBreaching

  SlackAlert:
    Condition: IsNotE2E
    Type: AWS::Events::Rule
    Properties:
      Description: EventRule
      EventPattern:
        detail:
          alarmName:
            - !Ref 5XXErrorsAlarm
            - !Ref TargetResponseTimeAlarm
          state:
            value:
              - ALARM
        detail-type:
          - CloudWatch Alarm State Change
        source:
          - aws.cloudwatch
      State: ENABLED
      Targets:
        - Arn: !GetAtt SlackBot.Outputs.LambdaFunctionArn
          Id: !GetAtt SlackBot.Outputs.LambdaFunction
          InputTransformer:
            InputPathsMap:
              alarmName: $.detail.alarmName
              reason: $.detail.state.reason
              account: $.account
              region: $.region
            InputTemplate: !Sub |
              {
                "channel": "${SlackChannel}",
                "username": "${SlackUser}",
                "attachments": [{
                  "title": "Alarm <alarmName>",
                  "color": "#F50727",
                  "fields": [{
                    "title": "Reason",
                    "value": "<reason>",
                    "short": false
                  }, {
                    "title": "Account",
                    "value": "<account>",
                    "short": true
                  }, {
                    "title": "Region",
                    "value": "<region>",
                    "short": true
                  }]
                }]
              }
  # endregion

  # region: metrics
  DevOpsDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardBody: !Sub
        - |+
          {
            "start": "-PT7D",
            "periodOverride": "inherit",
            "widgets": [
              {
                "type":"metric",
                "x":0,
                "y":0,
                "width":12,
                "height":6,
                "properties":{
                  "metrics":[
                    [ "AWS/ECS", "CPUUtilization", "ServiceName", "${ServiceName}", "ClusterName", "${ClusterName}" ],
                    [ "AWS/ECS", "MemoryUtilization", "ServiceName", "${ServiceName}", "ClusterName", "${ClusterName}" ]
                  ],
                  "period":300,
                  "stat":"Average",
                  "region":"eu-west-1",
                  "title":"ECS Instance CPU/Memory",
                  "liveData": false,
                  "legend": {
                    "position": "bottom"
                  }
                }
              },
              {
                "type":"metric",
                "width":3,
                "height":3,
                "properties":{
                  "metrics": [
                      [ "AWS/ApplicationELB", "RequestCount", "LoadBalancer", "${LoadBalancer}" ]
                  ],
                  "title":"RequestCount",
                  "view": "singleValue",
                  "region": "eu-west-1",
                  "stat": "Sum",
                  "period": 86400
                }
              },
              {
                "type":"metric",
                "width":3,
                "height":3,
                "properties":{
                  "metrics": [
                      [ "AWS/ApplicationELB", "NonStickyRequestCount", "LoadBalancer", "${LoadBalancer}" ]
                  ],
                  "title":"NonStickyRequestCount",
                  "view": "singleValue",
                  "region": "eu-west-1",
                  "stat": "Sum",
                  "period": 86400
                }
              },
              {
                "type": "metric",
                "x": 12,
                "y": 3,
                "width": 10,
                "height": 6,
                "properties": {
                  "title": "Thread Info",
                  "metrics": [
                    [ "Jvm-${StageName}", "jvm.threads.live.value", { "label": "Threads (daemon and non-daemon)" } ],
                    [ ".", "jvm.threads.states.value", "state", "timed-waiting", { "label": "Threads in status TIMED_WAITING" } ],
                    [ "...", "waiting", { "label": "Threads in status WAITING" } ]
                  ],
                  "view": "timeSeries",
                  "stacked": false,
                  "region": "eu-west-1",
                  "stat": "Average",
                  "period": 60,
                  "yAxis": {
                    "left": {
                      "showUnits": false,
                      "label": "Count"
                    }
                  }
                }
              }
            ]
          }
        - ServiceName: !GetAtt FargateService.Name
          ClusterName: !Ref Cluster
          LoadBalancer: !GetAtt IngressLoadBalancer.LoadBalancerFullName
          StageName: !Sub '${ParamStageName}'
      DashboardName: !Sub 'DevOps-${ParamStageName}'

  UxDashboard:
    Condition: IsNotE2E
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardBody: !Sub
        - |+
          {
            "widgets": [
              {
                "type": "custom",
                "x": 0,
                "y": 0,
                "width": 6,
                "height": 6,
                "properties": {
                  "endpoint": "${UsersArn}",
                  "updateOn": {
                    "refresh": true,
                    "resize": true,
                    "timeRange": true
                  }
                }
              },
              {
                "type": "custom",
                "x": 0,
                "y": 0,
                "width": 6,
                "height": 6,
                "properties": {
                  "endpoint": "${ProjectsOverTimeArn}",
                  "updateOn": {
                    "refresh": true,
                    "resize": true,
                    "timeRange": true
                  }
                }
              }
            ]
          }
        - UsersArn: !GetAtt GetUsers.Arn
          ProjectsOverTimeArn: !GetAtt GetProjectsOverTime.Arn
      DashboardName: !Sub 'UX-${ParamStageName}'
  # endregion

Outputs:
  PublicSubnets:
    Description: 'PublicSubnets'
    Value: !Join [',', !GetAtt NetworkPublicSubnets.Values]
  VcpId:
    Description: 'VpcId'
    Value: !Ref NetworkVpc
  SecurityGroup:
    Description: 'SecurityGroup'
    Value: !Ref IngressSecurityGroup
  MigrationStateMachine:
    Condition: IsMigrationActive
    Description: 'MigrationStatemachine'
    Value: !Ref MigrationStateMachine
  UserPoolId:
    Condition: IsE2E
    Description: 'ID of the UserPool'
    Value: !Ref UserPoolClient
